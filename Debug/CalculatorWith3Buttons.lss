
CalculatorWith3Buttons.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00002e8e  00002f22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008001a2  008001a2  00003064  2**0
                  ALLOC
  3 .stab         000025b0  00000000  00000000  00003064  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e7f  00000000  00000000  00005614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006493  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006653  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00006867  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000a347  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b654  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000b834  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000bb3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c555  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <main>
      8a:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e7       	ldi	r22, 0x7E	; 126
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ea 57       	subi	r30, 0x7A	; 122
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <MDIO_IntialPins>:
#include "STD_TYPES.h"

/* Set Intial Direction Function */

void MDIO_IntialPins(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62

	PRIVATE_DDRA_REG = PRIVATE_CONC(MDIO_PA7_A_DIR,
     ef2:	ea e3       	ldi	r30, 0x3A	; 58
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	80 83       	st	Z, r24
									MDIO_PA3_A_DIR,
									MDIO_PA2_A_DIR,
									MDIO_PA1_A_DIR,
									MDIO_PA0_A_DIR);

	PRIVATE_DDRB_REG = PRIVATE_CONC(MDIO_PA7_B_DIR,
     efa:	e7 e3       	ldi	r30, 0x37	; 55
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	80 83       	st	Z, r24
									MDIO_PA4_B_DIR,
									MDIO_PA3_B_DIR,
									MDIO_PA2_B_DIR,
									MDIO_PA1_B_DIR,
									MDIO_PA0_B_DIR);
	PRIVATE_DDRC_REG = PRIVATE_CONC(MDIO_PA7_C_DIR,
     f02:	e4 e3       	ldi	r30, 0x34	; 52
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	8f e0       	ldi	r24, 0x0F	; 15
     f08:	80 83       	st	Z, r24
									MDIO_PA4_C_DIR,
									MDIO_PA3_C_DIR,
									MDIO_PA2_C_DIR,
									MDIO_PA1_C_DIR,
									MDIO_PA0_C_DIR);
	PRIVATE_DDRD_REG = PRIVATE_CONC(MDIO_PA7_D_DIR,
     f0a:	e1 e3       	ldi	r30, 0x31	; 49
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	87 ec       	ldi	r24, 0xC7	; 199
     f10:	80 83       	st	Z, r24
									MDIO_PA3_D_DIR,
									MDIO_PA2_D_DIR,
									MDIO_PA1_D_DIR,
									MDIO_PA0_D_DIR);

	PRIVATE_PORTA_REG = PRIVATE_CONC(MDIO_PA7_A_INIT_VALUE,
     f12:	eb e3       	ldi	r30, 0x3B	; 59
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	10 82       	st	Z, r1
									 MDIO_PA3_A_INIT_VALUE,
									 MDIO_PA2_A_INIT_VALUE,
									 MDIO_PA1_A_INIT_VALUE,
									 MDIO_PA0_A_INIT_VALUE);

	PRIVATE_PORTB_REG = PRIVATE_CONC(MDIO_PA7_B_INIT_VALUE,
     f18:	e8 e3       	ldi	r30, 0x38	; 56
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	10 82       	st	Z, r1
									 MDIO_PA3_B_INIT_VALUE,
									 MDIO_PA2_B_INIT_VALUE,
									 MDIO_PA1_B_INIT_VALUE,
									 MDIO_PA0_B_INIT_VALUE);

	PRIVATE_PORTC_REG = PRIVATE_CONC(MDIO_PA7_C_INIT_VALUE,
     f1e:	e5 e3       	ldi	r30, 0x35	; 53
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	80 83       	st	Z, r24
									 MDIO_PA3_C_INIT_VALUE,
									 MDIO_PA2_C_INIT_VALUE,
									 MDIO_PA1_C_INIT_VALUE,
									 MDIO_PA0_C_INIT_VALUE);

	PRIVATE_PORTD_REG = PRIVATE_CONC(MDIO_PA7_D_INIT_VALUE,
     f26:	e2 e3       	ldi	r30, 0x32	; 50
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	88 e3       	ldi	r24, 0x38	; 56
     f2c:	80 83       	st	Z, r24
									 MDIO_PA4_D_INIT_VALUE,
									 MDIO_PA3_D_INIT_VALUE,
									 MDIO_PA2_D_INIT_VALUE,
									 MDIO_PA1_D_INIT_VALUE,
									 MDIO_PA0_D_INIT_VALUE);
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <MDIO_u8SetPinDirection>:

/* Set Pin Direction */
u8 MDIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirec)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <MDIO_u8SetPinDirection+0x6>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <MDIO_u8SetPinDirection+0x8>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <MDIO_u8SetPinDirection+0xa>
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	8a 83       	std	Y+2, r24	; 0x02
     f44:	6b 83       	std	Y+3, r22	; 0x03
     f46:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorSate = STD_TYPE_OK;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= MDIO_PIN_7 && Copy_u8PortId <= MDIO_PORTD && Copy_u8PinDirec <= MDIO_INPUT_PULLED_UP)
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	88 30       	cpi	r24, 0x08	; 8
     f50:	08 f0       	brcs	.+2      	; 0xf54 <MDIO_u8SetPinDirection+0x20>
     f52:	91 c1       	rjmp	.+802    	; 0x1276 <MDIO_u8SetPinDirection+0x342>
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	84 30       	cpi	r24, 0x04	; 4
     f58:	08 f0       	brcs	.+2      	; 0xf5c <MDIO_u8SetPinDirection+0x28>
     f5a:	8d c1       	rjmp	.+794    	; 0x1276 <MDIO_u8SetPinDirection+0x342>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	83 30       	cpi	r24, 0x03	; 3
     f60:	08 f0       	brcs	.+2      	; 0xf64 <MDIO_u8SetPinDirection+0x30>
     f62:	89 c1       	rjmp	.+786    	; 0x1276 <MDIO_u8SetPinDirection+0x342>
	{
		/* Select Pin Direction */
		switch (Copy_u8PortId)
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	3e 83       	std	Y+6, r19	; 0x06
     f6c:	2d 83       	std	Y+5, r18	; 0x05
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	9e 81       	ldd	r25, Y+6	; 0x06
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	91 05       	cpc	r25, r1
     f76:	09 f4       	brne	.+2      	; 0xf7a <MDIO_u8SetPinDirection+0x46>
     f78:	71 c0       	rjmp	.+226    	; 0x105c <MDIO_u8SetPinDirection+0x128>
     f7a:	2d 81       	ldd	r18, Y+5	; 0x05
     f7c:	3e 81       	ldd	r19, Y+6	; 0x06
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	2c f4       	brge	.+10     	; 0xf8e <MDIO_u8SetPinDirection+0x5a>
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <MDIO_u8SetPinDirection+0x74>
     f8c:	75 c1       	rjmp	.+746    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
     f8e:	2d 81       	ldd	r18, Y+5	; 0x05
     f90:	3e 81       	ldd	r19, Y+6	; 0x06
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <MDIO_u8SetPinDirection+0x66>
     f98:	bb c0       	rjmp	.+374    	; 0x1110 <MDIO_u8SetPinDirection+0x1dc>
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	83 30       	cpi	r24, 0x03	; 3
     fa0:	91 05       	cpc	r25, r1
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <MDIO_u8SetPinDirection+0x72>
     fa4:	0f c1       	rjmp	.+542    	; 0x11c4 <MDIO_u8SetPinDirection+0x290>
     fa6:	68 c1       	rjmp	.+720    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
		{
		case MDIO_PORTA:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	88 23       	and	r24, r24
     fac:	a1 f4       	brne	.+40     	; 0xfd6 <MDIO_u8SetPinDirection+0xa2>
			{
				/*Set DDRA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
     fae:	aa e3       	ldi	r26, 0x3A	; 58
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ea e3       	ldi	r30, 0x3A	; 58
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <MDIO_u8SetPinDirection+0x98>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <MDIO_u8SetPinDirection+0x94>
     fd0:	84 2b       	or	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	51 c1       	rjmp	.+674    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	a9 f4       	brne	.+42     	; 0x1006 <MDIO_u8SetPinDirection+0xd2>
			{
				/*Clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
     fdc:	aa e3       	ldi	r26, 0x3A	; 58
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ea e3       	ldi	r30, 0x3A	; 58
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <MDIO_u8SetPinDirection+0xc6>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <MDIO_u8SetPinDirection+0xc2>
     ffe:	80 95       	com	r24
    1000:	84 23       	and	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	39 c1       	rjmp	.+626    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	09 f0       	breq	.+2      	; 0x100e <MDIO_u8SetPinDirection+0xda>
    100c:	35 c1       	rjmp	.+618    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
    100e:	aa e3       	ldi	r26, 0x3A	; 58
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ea e3       	ldi	r30, 0x3A	; 58
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 c0       	rjmp	.+4      	; 0x102a <MDIO_u8SetPinDirection+0xf6>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	2a 95       	dec	r18
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <MDIO_u8SetPinDirection+0xf2>
    102e:	80 95       	com	r24
    1030:	84 23       	and	r24, r20
    1032:	8c 93       	st	X, r24
				/*Set PORTA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
    1034:	ab e3       	ldi	r26, 0x3B	; 59
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	eb e3       	ldi	r30, 0x3B	; 59
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <MDIO_u8SetPinDirection+0x11e>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <MDIO_u8SetPinDirection+0x11a>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	0e c1       	rjmp	.+540    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	88 23       	and	r24, r24
    1060:	a1 f4       	brne	.+40     	; 0x108a <MDIO_u8SetPinDirection+0x156>
			{
				/*Set DDRB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
    1062:	a7 e3       	ldi	r26, 0x37	; 55
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <MDIO_u8SetPinDirection+0x14c>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <MDIO_u8SetPinDirection+0x148>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	f7 c0       	rjmp	.+494    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	a9 f4       	brne	.+42     	; 0x10ba <MDIO_u8SetPinDirection+0x186>
			{
				/*Clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
    1090:	a7 e3       	ldi	r26, 0x37	; 55
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e7 e3       	ldi	r30, 0x37	; 55
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <MDIO_u8SetPinDirection+0x17a>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <MDIO_u8SetPinDirection+0x176>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	df c0       	rjmp	.+446    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	09 f0       	breq	.+2      	; 0x10c2 <MDIO_u8SetPinDirection+0x18e>
    10c0:	db c0       	rjmp	.+438    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
    10c2:	a7 e3       	ldi	r26, 0x37	; 55
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e7 e3       	ldi	r30, 0x37	; 55
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <MDIO_u8SetPinDirection+0x1aa>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	2a 95       	dec	r18
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <MDIO_u8SetPinDirection+0x1a6>
    10e2:	80 95       	com	r24
    10e4:	84 23       	and	r24, r20
    10e6:	8c 93       	st	X, r24
				/*Set PORTB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
    10e8:	a8 e3       	ldi	r26, 0x38	; 56
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <MDIO_u8SetPinDirection+0x1d2>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <MDIO_u8SetPinDirection+0x1ce>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	b4 c0       	rjmp	.+360    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	88 23       	and	r24, r24
    1114:	a1 f4       	brne	.+40     	; 0x113e <MDIO_u8SetPinDirection+0x20a>
			{
				/*Set DDRC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
    1116:	a4 e3       	ldi	r26, 0x34	; 52
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e4 e3       	ldi	r30, 0x34	; 52
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <MDIO_u8SetPinDirection+0x200>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <MDIO_u8SetPinDirection+0x1fc>
    1138:	84 2b       	or	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	9d c0       	rjmp	.+314    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	a9 f4       	brne	.+42     	; 0x116e <MDIO_u8SetPinDirection+0x23a>
			{
				/*Clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
    1144:	a4 e3       	ldi	r26, 0x34	; 52
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e4 e3       	ldi	r30, 0x34	; 52
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <MDIO_u8SetPinDirection+0x22e>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <MDIO_u8SetPinDirection+0x22a>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	85 c0       	rjmp	.+266    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	09 f0       	breq	.+2      	; 0x1176 <MDIO_u8SetPinDirection+0x242>
    1174:	81 c0       	rjmp	.+258    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
    1176:	a4 e3       	ldi	r26, 0x34	; 52
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e4 e3       	ldi	r30, 0x34	; 52
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <MDIO_u8SetPinDirection+0x25e>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	2a 95       	dec	r18
    1194:	e2 f7       	brpl	.-8      	; 0x118e <MDIO_u8SetPinDirection+0x25a>
    1196:	80 95       	com	r24
    1198:	84 23       	and	r24, r20
    119a:	8c 93       	st	X, r24
				/*Set PORTC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
    119c:	a5 e3       	ldi	r26, 0x35	; 53
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e3       	ldi	r30, 0x35	; 53
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <MDIO_u8SetPinDirection+0x286>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <MDIO_u8SetPinDirection+0x282>
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	5a c0       	rjmp	.+180    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
    11c4:	8c 81       	ldd	r24, Y+4	; 0x04
    11c6:	88 23       	and	r24, r24
    11c8:	a1 f4       	brne	.+40     	; 0x11f2 <MDIO_u8SetPinDirection+0x2be>
			{
				/*Set DDRD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
    11ca:	a1 e3       	ldi	r26, 0x31	; 49
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e1 e3       	ldi	r30, 0x31	; 49
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <MDIO_u8SetPinDirection+0x2b4>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <MDIO_u8SetPinDirection+0x2b0>
    11ec:	84 2b       	or	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	43 c0       	rjmp	.+134    	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	a9 f4       	brne	.+42     	; 0x1222 <MDIO_u8SetPinDirection+0x2ee>
			{
				/*Clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
    11f8:	a1 e3       	ldi	r26, 0x31	; 49
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e1 e3       	ldi	r30, 0x31	; 49
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <MDIO_u8SetPinDirection+0x2e2>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <MDIO_u8SetPinDirection+0x2de>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	2b c0       	rjmp	.+86     	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	41 f5       	brne	.+80     	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
    1228:	a1 e3       	ldi	r26, 0x31	; 49
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e1 e3       	ldi	r30, 0x31	; 49
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <MDIO_u8SetPinDirection+0x310>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	2a 95       	dec	r18
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <MDIO_u8SetPinDirection+0x30c>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
				/*Set PORTD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
    124e:	a2 e3       	ldi	r26, 0x32	; 50
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <MDIO_u8SetPinDirection+0x338>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <MDIO_u8SetPinDirection+0x334>
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <MDIO_u8SetPinDirection+0x344>
			break;
		}
	}
	else
	{
		Local_u8ErrorSate = STD_TYPE_NOK;
    1276:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
}
    127a:	26 96       	adiw	r28, 0x06	; 6
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <MDIO_u8SetPortDirection>:

/* Set Port Direction */
u8 MDIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirec)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <MDIO_u8SetPortDirection+0x6>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <MDIO_u8SetPortDirection+0x8>
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	8a 83       	std	Y+2, r24	; 0x02
    129c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorSate = STD_TYPE_OK;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= MDIO_PORTD) && (Copy_u8PortDirec <= MDIO_INPUT_PULLED_UP))
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <MDIO_u8SetPortDirection+0x1e>
    12a8:	90 c0       	rjmp	.+288    	; 0x13ca <MDIO_u8SetPortDirection+0x13e>
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <MDIO_u8SetPortDirection+0x26>
    12b0:	8c c0       	rjmp	.+280    	; 0x13ca <MDIO_u8SetPortDirection+0x13e>
	{
		switch (Copy_u8PortId)
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3d 83       	std	Y+5, r19	; 0x05
    12ba:	2c 83       	std	Y+4, r18	; 0x04
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	9d 81       	ldd	r25, Y+5	; 0x05
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	89 f1       	breq	.+98     	; 0x1328 <MDIO_u8SetPortDirection+0x9c>
    12c6:	2c 81       	ldd	r18, Y+4	; 0x04
    12c8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	2c f4       	brge	.+10     	; 0x12da <MDIO_u8SetPortDirection+0x4e>
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	69 f0       	breq	.+26     	; 0x12f2 <MDIO_u8SetPortDirection+0x66>
    12d8:	76 c0       	rjmp	.+236    	; 0x13c6 <MDIO_u8SetPortDirection+0x13a>
    12da:	2c 81       	ldd	r18, Y+4	; 0x04
    12dc:	3d 81       	ldd	r19, Y+5	; 0x05
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	e9 f1       	breq	.+122    	; 0x135e <MDIO_u8SetPortDirection+0xd2>
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <MDIO_u8SetPortDirection+0x64>
    12ee:	51 c0       	rjmp	.+162    	; 0x1392 <MDIO_u8SetPortDirection+0x106>
    12f0:	6a c0       	rjmp	.+212    	; 0x13c6 <MDIO_u8SetPortDirection+0x13a>
		{
		case MDIO_PORTA:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	88 23       	and	r24, r24
    12f6:	29 f4       	brne	.+10     	; 0x1302 <MDIO_u8SetPortDirection+0x76>
			{
				/* Set all Port A pins as Output */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_OUTPUT;
    12f8:	ea e3       	ldi	r30, 0x3A	; 58
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	80 83       	st	Z, r24
    1300:	65 c0       	rjmp	.+202    	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	21 f4       	brne	.+8      	; 0x1310 <MDIO_u8SetPortDirection+0x84>
			{
				/* Set all Port A pins as Input (Floating) */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    1308:	ea e3       	ldi	r30, 0x3A	; 58
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	10 82       	st	Z, r1
    130e:	5e c0       	rjmp	.+188    	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	09 f0       	breq	.+2      	; 0x1318 <MDIO_u8SetPortDirection+0x8c>
    1316:	5a c0       	rjmp	.+180    	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port A pins as Input (Pulled-Up) */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    1318:	ea e3       	ldi	r30, 0x3A	; 58
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port A pins */
				PRIVATE_PORTA_REG = PRIVATE_ALL_PORT_OUTPUT;
    131e:	eb e3       	ldi	r30, 0x3B	; 59
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	80 83       	st	Z, r24
    1326:	52 c0       	rjmp	.+164    	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	88 23       	and	r24, r24
    132c:	29 f4       	brne	.+10     	; 0x1338 <MDIO_u8SetPortDirection+0xac>
			{
				/* Set all Port B pins as Output */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_OUTPUT;
    132e:	e7 e3       	ldi	r30, 0x37	; 55
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	80 83       	st	Z, r24
    1336:	4a c0       	rjmp	.+148    	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	21 f4       	brne	.+8      	; 0x1346 <MDIO_u8SetPortDirection+0xba>
			{
				/* Set all Port B pins as Input (Floating) */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    133e:	e7 e3       	ldi	r30, 0x37	; 55
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	10 82       	st	Z, r1
    1344:	43 c0       	rjmp	.+134    	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	82 30       	cpi	r24, 0x02	; 2
    134a:	09 f0       	breq	.+2      	; 0x134e <MDIO_u8SetPortDirection+0xc2>
    134c:	3f c0       	rjmp	.+126    	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port B pins as Input (Pulled-Up) */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    134e:	e7 e3       	ldi	r30, 0x37	; 55
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port B pins */
				PRIVATE_PORTB_REG = PRIVATE_ALL_PORT_OUTPUT;
    1354:	e8 e3       	ldi	r30, 0x38	; 56
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	80 83       	st	Z, r24
    135c:	37 c0       	rjmp	.+110    	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	88 23       	and	r24, r24
    1362:	29 f4       	brne	.+10     	; 0x136e <MDIO_u8SetPortDirection+0xe2>
			{
				/* Set all Port C pins as Output */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_OUTPUT;
    1364:	e4 e3       	ldi	r30, 0x34	; 52
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	80 83       	st	Z, r24
    136c:	2f c0       	rjmp	.+94     	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	21 f4       	brne	.+8      	; 0x137c <MDIO_u8SetPortDirection+0xf0>
			{
				/* Set all Port C pins as Input (Floating) */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    1374:	e4 e3       	ldi	r30, 0x34	; 52
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	10 82       	st	Z, r1
    137a:	28 c0       	rjmp	.+80     	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	82 30       	cpi	r24, 0x02	; 2
    1380:	29 f5       	brne	.+74     	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port C pins as Input (Pulled-Up) */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    1382:	e4 e3       	ldi	r30, 0x34	; 52
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port C pins */
				PRIVATE_PORTC_REG = PRIVATE_ALL_PORT_OUTPUT;
    1388:	e5 e3       	ldi	r30, 0x35	; 53
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	80 83       	st	Z, r24
    1390:	1d c0       	rjmp	.+58     	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 23       	and	r24, r24
    1396:	29 f4       	brne	.+10     	; 0x13a2 <MDIO_u8SetPortDirection+0x116>
			{
				/* Set all Port D pins as Output */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_OUTPUT;
    1398:	e1 e3       	ldi	r30, 0x31	; 49
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	8f ef       	ldi	r24, 0xFF	; 255
    139e:	80 83       	st	Z, r24
    13a0:	15 c0       	rjmp	.+42     	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	21 f4       	brne	.+8      	; 0x13b0 <MDIO_u8SetPortDirection+0x124>
			{
				/* Set all Port D pins as Input (Floating) */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    13a8:	e1 e3       	ldi	r30, 0x31	; 49
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	10 82       	st	Z, r1
    13ae:	0e c0       	rjmp	.+28     	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	82 30       	cpi	r24, 0x02	; 2
    13b4:	59 f4       	brne	.+22     	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port D pins as Input (Pulled-Up) */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    13b6:	e1 e3       	ldi	r30, 0x31	; 49
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port D pins */
				PRIVATE_PORTD_REG = PRIVATE_ALL_PORT_OUTPUT;
    13bc:	e2 e3       	ldi	r30, 0x32	; 50
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	8f ef       	ldi	r24, 0xFF	; 255
    13c2:	80 83       	st	Z, r24
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			}
			break;
		default:
			Local_u8ErrorSate = STD_TYPE_NOK;
    13c6:	19 82       	std	Y+1, r1	; 0x01
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <MDIO_u8SetPortDirection+0x140>
			break;
		}
	}
	else
	{
		Local_u8ErrorSate = STD_TYPE_NOK;
    13ca:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <MDIO_u8SetPinValue>:
/* Set Pin Value */
u8 MDIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <MDIO_u8SetPinValue+0x6>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <MDIO_u8SetPinValue+0x8>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <MDIO_u8SetPinValue+0xa>
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	8a 83       	std	Y+2, r24	; 0x02
    13ee:	6b 83       	std	Y+3, r22	; 0x03
    13f0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_PIN_7 && Copy_u8PinValue <= MDIO_HIGH)
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	84 30       	cpi	r24, 0x04	; 4
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <MDIO_u8SetPinValue+0x20>
    13fc:	eb c0       	rjmp	.+470    	; 0x15d4 <MDIO_u8SetPinValue+0x1f6>
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	88 30       	cpi	r24, 0x08	; 8
    1402:	08 f0       	brcs	.+2      	; 0x1406 <MDIO_u8SetPinValue+0x28>
    1404:	e7 c0       	rjmp	.+462    	; 0x15d4 <MDIO_u8SetPinValue+0x1f6>
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
    1408:	82 30       	cpi	r24, 0x02	; 2
    140a:	08 f0       	brcs	.+2      	; 0x140e <MDIO_u8SetPinValue+0x30>
    140c:	e3 c0       	rjmp	.+454    	; 0x15d4 <MDIO_u8SetPinValue+0x1f6>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	3e 83       	std	Y+6, r19	; 0x06
    1416:	2d 83       	std	Y+5, r18	; 0x05
    1418:	8d 81       	ldd	r24, Y+5	; 0x05
    141a:	9e 81       	ldd	r25, Y+6	; 0x06
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	91 05       	cpc	r25, r1
    1420:	09 f4       	brne	.+2      	; 0x1424 <MDIO_u8SetPinValue+0x46>
    1422:	47 c0       	rjmp	.+142    	; 0x14b2 <MDIO_u8SetPinValue+0xd4>
    1424:	2d 81       	ldd	r18, Y+5	; 0x05
    1426:	3e 81       	ldd	r19, Y+6	; 0x06
    1428:	22 30       	cpi	r18, 0x02	; 2
    142a:	31 05       	cpc	r19, r1
    142c:	2c f4       	brge	.+10     	; 0x1438 <MDIO_u8SetPinValue+0x5a>
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	71 f0       	breq	.+28     	; 0x1452 <MDIO_u8SetPinValue+0x74>
    1436:	cc c0       	rjmp	.+408    	; 0x15d0 <MDIO_u8SetPinValue+0x1f2>
    1438:	2d 81       	ldd	r18, Y+5	; 0x05
    143a:	3e 81       	ldd	r19, Y+6	; 0x06
    143c:	22 30       	cpi	r18, 0x02	; 2
    143e:	31 05       	cpc	r19, r1
    1440:	09 f4       	brne	.+2      	; 0x1444 <MDIO_u8SetPinValue+0x66>
    1442:	67 c0       	rjmp	.+206    	; 0x1512 <MDIO_u8SetPinValue+0x134>
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	91 05       	cpc	r25, r1
    144c:	09 f4       	brne	.+2      	; 0x1450 <MDIO_u8SetPinValue+0x72>
    144e:	91 c0       	rjmp	.+290    	; 0x1572 <MDIO_u8SetPinValue+0x194>
    1450:	bf c0       	rjmp	.+382    	; 0x15d0 <MDIO_u8SetPinValue+0x1f2>
		{
		case MDIO_PORTA:
			if (Copy_u8PinValue == MDIO_HIGH)
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	a1 f4       	brne	.+40     	; 0x1480 <MDIO_u8SetPinValue+0xa2>
			{
				/* Set PORTA Pin in PORTA Reg */
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
    1458:	ab e3       	ldi	r26, 0x3B	; 59
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	eb e3       	ldi	r30, 0x3B	; 59
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <MDIO_u8SetPinValue+0x98>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <MDIO_u8SetPinValue+0x94>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	ab c0       	rjmp	.+342    	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	88 23       	and	r24, r24
    1484:	09 f0       	breq	.+2      	; 0x1488 <MDIO_u8SetPinValue+0xaa>
    1486:	a7 c0       	rjmp	.+334    	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTA Pin in PORTA Reg */
				CLEAR_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
    1488:	ab e3       	ldi	r26, 0x3B	; 59
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	eb e3       	ldi	r30, 0x3B	; 59
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <MDIO_u8SetPinValue+0xc8>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <MDIO_u8SetPinValue+0xc4>
    14aa:	80 95       	com	r24
    14ac:	84 23       	and	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	92 c0       	rjmp	.+292    	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinValue == MDIO_HIGH)
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	a1 f4       	brne	.+40     	; 0x14e0 <MDIO_u8SetPinValue+0x102>
			{
				/* Set PORTB Pin in PORTB Reg */
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
    14b8:	a8 e3       	ldi	r26, 0x38	; 56
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e8 e3       	ldi	r30, 0x38	; 56
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <MDIO_u8SetPinValue+0xf8>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <MDIO_u8SetPinValue+0xf4>
    14da:	84 2b       	or	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	7b c0       	rjmp	.+246    	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    14e0:	8c 81       	ldd	r24, Y+4	; 0x04
    14e2:	88 23       	and	r24, r24
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <MDIO_u8SetPinValue+0x10a>
    14e6:	77 c0       	rjmp	.+238    	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTB Pin in PORTB Reg */
				CLEAR_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
    14e8:	a8 e3       	ldi	r26, 0x38	; 56
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e8 e3       	ldi	r30, 0x38	; 56
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <MDIO_u8SetPinValue+0x128>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <MDIO_u8SetPinValue+0x124>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	62 c0       	rjmp	.+196    	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinValue == MDIO_HIGH)
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	a1 f4       	brne	.+40     	; 0x1540 <MDIO_u8SetPinValue+0x162>
			{
				/* Set PORTC Pin in PORTC Reg */
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
    1518:	a5 e3       	ldi	r26, 0x35	; 53
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e5 e3       	ldi	r30, 0x35	; 53
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <MDIO_u8SetPinValue+0x158>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <MDIO_u8SetPinValue+0x154>
    153a:	84 2b       	or	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	4b c0       	rjmp	.+150    	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	88 23       	and	r24, r24
    1544:	09 f0       	breq	.+2      	; 0x1548 <MDIO_u8SetPinValue+0x16a>
    1546:	47 c0       	rjmp	.+142    	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTC Pin in PORTC Reg */
				CLEAR_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
    1548:	a5 e3       	ldi	r26, 0x35	; 53
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e3       	ldi	r30, 0x35	; 53
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <MDIO_u8SetPinValue+0x188>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <MDIO_u8SetPinValue+0x184>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	32 c0       	rjmp	.+100    	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinValue == MDIO_HIGH)
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	a1 f4       	brne	.+40     	; 0x15a0 <MDIO_u8SetPinValue+0x1c2>
			{
				/* Set PORTD Pin in PORTD Reg */
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
    1578:	a2 e3       	ldi	r26, 0x32	; 50
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 e3       	ldi	r30, 0x32	; 50
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <MDIO_u8SetPinValue+0x1b8>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <MDIO_u8SetPinValue+0x1b4>
    159a:	84 2b       	or	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	1b c0       	rjmp	.+54     	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	88 23       	and	r24, r24
    15a4:	c1 f4       	brne	.+48     	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTD Pin in PORTD Reg */
				CLEAR_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
    15a6:	a2 e3       	ldi	r26, 0x32	; 50
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e2 e3       	ldi	r30, 0x32	; 50
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <MDIO_u8SetPinValue+0x1e6>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <MDIO_u8SetPinValue+0x1e2>
    15c8:	80 95       	com	r24
    15ca:	84 23       	and	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	03 c0       	rjmp	.+6      	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
    15d0:	19 82       	std	Y+1, r1	; 0x01
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <MDIO_u8SetPinValue+0x1f8>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK;
    15d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d8:	26 96       	adiw	r28, 0x06	; 6
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <MDIO_u8SetPortValue>:

/* Set Port Value */
u8 MDIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <MDIO_u8SetPortValue+0x6>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <MDIO_u8SetPortValue+0x8>
    15f2:	0f 92       	push	r0
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	8a 83       	std	Y+2, r24	; 0x02
    15fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <= MDIO_PORTD)
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	84 30       	cpi	r24, 0x04	; 4
    1604:	98 f5       	brcc	.+102    	; 0x166c <MDIO_u8SetPortValue+0x82>
	{
		switch (Copy_u8PortId)
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	3d 83       	std	Y+5, r19	; 0x05
    160e:	2c 83       	std	Y+4, r18	; 0x04
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	91 05       	cpc	r25, r1
    1618:	d1 f0       	breq	.+52     	; 0x164e <MDIO_u8SetPortValue+0x64>
    161a:	2c 81       	ldd	r18, Y+4	; 0x04
    161c:	3d 81       	ldd	r19, Y+5	; 0x05
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	2c f4       	brge	.+10     	; 0x162e <MDIO_u8SetPortValue+0x44>
    1624:	8c 81       	ldd	r24, Y+4	; 0x04
    1626:	9d 81       	ldd	r25, Y+5	; 0x05
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	61 f0       	breq	.+24     	; 0x1644 <MDIO_u8SetPortValue+0x5a>
    162c:	20 c0       	rjmp	.+64     	; 0x166e <MDIO_u8SetPortValue+0x84>
    162e:	2c 81       	ldd	r18, Y+4	; 0x04
    1630:	3d 81       	ldd	r19, Y+5	; 0x05
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	81 f0       	breq	.+32     	; 0x1658 <MDIO_u8SetPortValue+0x6e>
    1638:	8c 81       	ldd	r24, Y+4	; 0x04
    163a:	9d 81       	ldd	r25, Y+5	; 0x05
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	91 05       	cpc	r25, r1
    1640:	81 f0       	breq	.+32     	; 0x1662 <MDIO_u8SetPortValue+0x78>
    1642:	15 c0       	rjmp	.+42     	; 0x166e <MDIO_u8SetPortValue+0x84>
		{
		case MDIO_PORTA: PRIVATE_PORTA_REG = Copy_u8PortValue; break;
    1644:	eb e3       	ldi	r30, 0x3B	; 59
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	80 83       	st	Z, r24
    164c:	10 c0       	rjmp	.+32     	; 0x166e <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTB: PRIVATE_PORTB_REG = Copy_u8PortValue; break;
    164e:	e8 e3       	ldi	r30, 0x38	; 56
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	80 83       	st	Z, r24
    1656:	0b c0       	rjmp	.+22     	; 0x166e <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTC: PRIVATE_PORTC_REG = Copy_u8PortValue; break;
    1658:	e5 e3       	ldi	r30, 0x35	; 53
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	80 83       	st	Z, r24
    1660:	06 c0       	rjmp	.+12     	; 0x166e <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTD: PRIVATE_PORTD_REG = Copy_u8PortValue; break;
    1662:	e2 e3       	ldi	r30, 0x32	; 50
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	80 83       	st	Z, r24
    166a:	01 c0       	rjmp	.+2      	; 0x166e <MDIO_u8SetPortValue+0x84>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK;
    166c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <MDIO_u8GetPinValue>:

/* Get Pin Value */
u8 MDIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	27 97       	sbiw	r28, 0x07	; 7
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	8a 83       	std	Y+2, r24	; 0x02
    1696:	6b 83       	std	Y+3, r22	; 0x03
    1698:	5d 83       	std	Y+5, r21	; 0x05
    169a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Initialize error state to OK
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	89 83       	std	Y+1, r24	; 0x01

	// Check if the port ID, pin ID are within valid ranges and pointer is not NULL
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_PIN_7 && Copy_pu8ReturnedPinValue != POINTER_NULL)
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	84 30       	cpi	r24, 0x04	; 4
    16a4:	08 f0       	brcs	.+2      	; 0x16a8 <MDIO_u8GetPinValue+0x28>
    16a6:	7c c0       	rjmp	.+248    	; 0x17a0 <MDIO_u8GetPinValue+0x120>
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	88 30       	cpi	r24, 0x08	; 8
    16ac:	08 f0       	brcs	.+2      	; 0x16b0 <MDIO_u8GetPinValue+0x30>
    16ae:	78 c0       	rjmp	.+240    	; 0x17a0 <MDIO_u8GetPinValue+0x120>
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	09 f4       	brne	.+2      	; 0x16ba <MDIO_u8GetPinValue+0x3a>
    16b8:	73 c0       	rjmp	.+230    	; 0x17a0 <MDIO_u8GetPinValue+0x120>
	{
		// Retrieve the value from the correct port
		switch (Copy_u8PortId)
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3f 83       	std	Y+7, r19	; 0x07
    16c2:	2e 83       	std	Y+6, r18	; 0x06
    16c4:	4e 81       	ldd	r20, Y+6	; 0x06
    16c6:	5f 81       	ldd	r21, Y+7	; 0x07
    16c8:	41 30       	cpi	r20, 0x01	; 1
    16ca:	51 05       	cpc	r21, r1
    16cc:	59 f1       	breq	.+86     	; 0x1724 <MDIO_u8GetPinValue+0xa4>
    16ce:	8e 81       	ldd	r24, Y+6	; 0x06
    16d0:	9f 81       	ldd	r25, Y+7	; 0x07
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	91 05       	cpc	r25, r1
    16d6:	34 f4       	brge	.+12     	; 0x16e4 <MDIO_u8GetPinValue+0x64>
    16d8:	2e 81       	ldd	r18, Y+6	; 0x06
    16da:	3f 81       	ldd	r19, Y+7	; 0x07
    16dc:	21 15       	cp	r18, r1
    16de:	31 05       	cpc	r19, r1
    16e0:	69 f0       	breq	.+26     	; 0x16fc <MDIO_u8GetPinValue+0x7c>
    16e2:	5c c0       	rjmp	.+184    	; 0x179c <MDIO_u8GetPinValue+0x11c>
    16e4:	4e 81       	ldd	r20, Y+6	; 0x06
    16e6:	5f 81       	ldd	r21, Y+7	; 0x07
    16e8:	42 30       	cpi	r20, 0x02	; 2
    16ea:	51 05       	cpc	r21, r1
    16ec:	79 f1       	breq	.+94     	; 0x174c <MDIO_u8GetPinValue+0xcc>
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	91 05       	cpc	r25, r1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <MDIO_u8GetPinValue+0x7a>
    16f8:	3d c0       	rjmp	.+122    	; 0x1774 <MDIO_u8GetPinValue+0xf4>
    16fa:	50 c0       	rjmp	.+160    	; 0x179c <MDIO_u8GetPinValue+0x11c>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINA_REG, Copy_u8PinId); // Get specific pin value from PORTA
    16fc:	e9 e3       	ldi	r30, 0x39	; 57
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a9 01       	movw	r20, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <MDIO_u8GetPinValue+0x94>
    1710:	55 95       	asr	r21
    1712:	47 95       	ror	r20
    1714:	8a 95       	dec	r24
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <MDIO_u8GetPinValue+0x90>
    1718:	ca 01       	movw	r24, r20
    171a:	81 70       	andi	r24, 0x01	; 1
    171c:	ec 81       	ldd	r30, Y+4	; 0x04
    171e:	fd 81       	ldd	r31, Y+5	; 0x05
    1720:	80 83       	st	Z, r24
    1722:	3f c0       	rjmp	.+126    	; 0x17a2 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINB_REG, Copy_u8PinId); // Get specific pin value from PORTB
    1724:	e6 e3       	ldi	r30, 0x36	; 54
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a9 01       	movw	r20, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <MDIO_u8GetPinValue+0xbc>
    1738:	55 95       	asr	r21
    173a:	47 95       	ror	r20
    173c:	8a 95       	dec	r24
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <MDIO_u8GetPinValue+0xb8>
    1740:	ca 01       	movw	r24, r20
    1742:	81 70       	andi	r24, 0x01	; 1
    1744:	ec 81       	ldd	r30, Y+4	; 0x04
    1746:	fd 81       	ldd	r31, Y+5	; 0x05
    1748:	80 83       	st	Z, r24
    174a:	2b c0       	rjmp	.+86     	; 0x17a2 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINC_REG, Copy_u8PinId); // Get specific pin value from PORTC
    174c:	e3 e3       	ldi	r30, 0x33	; 51
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a9 01       	movw	r20, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <MDIO_u8GetPinValue+0xe4>
    1760:	55 95       	asr	r21
    1762:	47 95       	ror	r20
    1764:	8a 95       	dec	r24
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <MDIO_u8GetPinValue+0xe0>
    1768:	ca 01       	movw	r24, r20
    176a:	81 70       	andi	r24, 0x01	; 1
    176c:	ec 81       	ldd	r30, Y+4	; 0x04
    176e:	fd 81       	ldd	r31, Y+5	; 0x05
    1770:	80 83       	st	Z, r24
    1772:	17 c0       	rjmp	.+46     	; 0x17a2 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PIND_REG, Copy_u8PinId); // Get specific pin value from PORTD
    1774:	e0 e3       	ldi	r30, 0x30	; 48
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a9 01       	movw	r20, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <MDIO_u8GetPinValue+0x10c>
    1788:	55 95       	asr	r21
    178a:	47 95       	ror	r20
    178c:	8a 95       	dec	r24
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <MDIO_u8GetPinValue+0x108>
    1790:	ca 01       	movw	r24, r20
    1792:	81 70       	andi	r24, 0x01	; 1
    1794:	ec 81       	ldd	r30, Y+4	; 0x04
    1796:	fd 81       	ldd	r31, Y+5	; 0x05
    1798:	80 83       	st	Z, r24
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <MDIO_u8GetPinValue+0x122>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if port ID is invalid
    179c:	19 82       	std	Y+1, r1	; 0x01
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <MDIO_u8GetPinValue+0x122>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if input parameters are invalid
    17a0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState; // Return the error state
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a4:	27 96       	adiw	r28, 0x07	; 7
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <MDIO_u8GetPortValue>:

/* Get Port Value */
u8 MDIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <MDIO_u8GetPortValue+0x6>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <MDIO_u8GetPortValue+0x8>
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <MDIO_u8GetPortValue+0xa>
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	8a 83       	std	Y+2, r24	; 0x02
    17c6:	7c 83       	std	Y+4, r23	; 0x04
    17c8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_pu8ReturnedPortValue != POINTER_NULL)
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	84 30       	cpi	r24, 0x04	; 4
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <MDIO_u8GetPortValue+0x20>
    17d4:	40 c0       	rjmp	.+128    	; 0x1856 <MDIO_u8GetPortValue+0xa0>
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	e1 f1       	breq	.+120    	; 0x1856 <MDIO_u8GetPortValue+0xa0>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	3e 83       	std	Y+6, r19	; 0x06
    17e6:	2d 83       	std	Y+5, r18	; 0x05
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	9e 81       	ldd	r25, Y+6	; 0x06
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	91 05       	cpc	r25, r1
    17f0:	e1 f0       	breq	.+56     	; 0x182a <MDIO_u8GetPortValue+0x74>
    17f2:	2d 81       	ldd	r18, Y+5	; 0x05
    17f4:	3e 81       	ldd	r19, Y+6	; 0x06
    17f6:	22 30       	cpi	r18, 0x02	; 2
    17f8:	31 05       	cpc	r19, r1
    17fa:	2c f4       	brge	.+10     	; 0x1806 <MDIO_u8GetPortValue+0x50>
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	61 f0       	breq	.+24     	; 0x181c <MDIO_u8GetPortValue+0x66>
    1804:	27 c0       	rjmp	.+78     	; 0x1854 <MDIO_u8GetPortValue+0x9e>
    1806:	2d 81       	ldd	r18, Y+5	; 0x05
    1808:	3e 81       	ldd	r19, Y+6	; 0x06
    180a:	22 30       	cpi	r18, 0x02	; 2
    180c:	31 05       	cpc	r19, r1
    180e:	a1 f0       	breq	.+40     	; 0x1838 <MDIO_u8GetPortValue+0x82>
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	9e 81       	ldd	r25, Y+6	; 0x06
    1814:	83 30       	cpi	r24, 0x03	; 3
    1816:	91 05       	cpc	r25, r1
    1818:	b1 f0       	breq	.+44     	; 0x1846 <MDIO_u8GetPortValue+0x90>
    181a:	1c c0       	rjmp	.+56     	; 0x1854 <MDIO_u8GetPortValue+0x9e>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINA_REG;
    181c:	e9 e3       	ldi	r30, 0x39	; 57
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	eb 81       	ldd	r30, Y+3	; 0x03
    1824:	fc 81       	ldd	r31, Y+4	; 0x04
    1826:	80 83       	st	Z, r24
    1828:	16 c0       	rjmp	.+44     	; 0x1856 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINB_REG;
    182a:	e6 e3       	ldi	r30, 0x36	; 54
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	eb 81       	ldd	r30, Y+3	; 0x03
    1832:	fc 81       	ldd	r31, Y+4	; 0x04
    1834:	80 83       	st	Z, r24
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINC_REG;
    1838:	e3 e3       	ldi	r30, 0x33	; 51
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	eb 81       	ldd	r30, Y+3	; 0x03
    1840:	fc 81       	ldd	r31, Y+4	; 0x04
    1842:	80 83       	st	Z, r24
    1844:	08 c0       	rjmp	.+16     	; 0x1856 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPortValue = PRIVATE_PIND_REG;
    1846:	e0 e3       	ldi	r30, 0x30	; 48
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	eb 81       	ldd	r30, Y+3	; 0x03
    184e:	fc 81       	ldd	r31, Y+4	; 0x04
    1850:	80 83       	st	Z, r24
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <MDIO_u8GetPortValue+0xa0>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
    1854:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_u8ErrorState;
    1856:	89 81       	ldd	r24, Y+1	; 0x01
}
    1858:	26 96       	adiw	r28, 0x06	; 6
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <HLCD_VoidLcdIint>:
#include "HLCD_private.h"
#include "HLCD_config.h"
#include "HLCD_interface.h"

void HLCD_VoidLcdIint(void)
{
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	cc 54       	subi	r28, 0x4C	; 76
    1878:	d0 40       	sbci	r29, 0x00	; 0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	f8 94       	cli
    187e:	de bf       	out	0x3e, r29	; 62
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	cd bf       	out	0x3d, r28	; 61
    1884:	fe 01       	movw	r30, r28
    1886:	e7 5b       	subi	r30, 0xB7	; 183
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a8 ef       	ldi	r26, 0xF8	; 248
    1890:	b1 e4       	ldi	r27, 0x41	; 65
    1892:	80 83       	st	Z, r24
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	a2 83       	std	Z+2, r26	; 0x02
    1898:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	8e 01       	movw	r16, r28
    189c:	0b 5b       	subi	r16, 0xBB	; 187
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	fe 01       	movw	r30, r28
    18a2:	e7 5b       	subi	r30, 0xB7	; 183
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a ef       	ldi	r20, 0xFA	; 250
    18b4:	54 e4       	ldi	r21, 0x44	; 68
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	f8 01       	movw	r30, r16
    18c0:	80 83       	st	Z, r24
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	a2 83       	std	Z+2, r26	; 0x02
    18c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18c8:	fe 01       	movw	r30, r28
    18ca:	eb 5b       	subi	r30, 0xBB	; 187
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	60 81       	ld	r22, Z
    18d0:	71 81       	ldd	r23, Z+1	; 0x01
    18d2:	82 81       	ldd	r24, Z+2	; 0x02
    18d4:	93 81       	ldd	r25, Z+3	; 0x03
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	44 f4       	brge	.+16     	; 0x18f6 <HLCD_VoidLcdIint+0x8c>
		__ticks = 1;
    18e6:	fe 01       	movw	r30, r28
    18e8:	ed 5b       	subi	r30, 0xBD	; 189
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	64 c0       	rjmp	.+200    	; 0x19be <HLCD_VoidLcdIint+0x154>
	else if (__tmp > 65535)
    18f6:	fe 01       	movw	r30, r28
    18f8:	eb 5b       	subi	r30, 0xBB	; 187
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	3f ef       	ldi	r19, 0xFF	; 255
    1908:	4f e7       	ldi	r20, 0x7F	; 127
    190a:	57 e4       	ldi	r21, 0x47	; 71
    190c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1910:	18 16       	cp	r1, r24
    1912:	0c f0       	brlt	.+2      	; 0x1916 <HLCD_VoidLcdIint+0xac>
    1914:	43 c0       	rjmp	.+134    	; 0x199c <HLCD_VoidLcdIint+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1916:	fe 01       	movw	r30, r28
    1918:	e7 5b       	subi	r30, 0xB7	; 183
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	60 81       	ld	r22, Z
    191e:	71 81       	ldd	r23, Z+1	; 0x01
    1920:	82 81       	ldd	r24, Z+2	; 0x02
    1922:	93 81       	ldd	r25, Z+3	; 0x03
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e2       	ldi	r20, 0x20	; 32
    192a:	51 e4       	ldi	r21, 0x41	; 65
    192c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8e 01       	movw	r16, r28
    1936:	0d 5b       	subi	r16, 0xBD	; 189
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	f8 01       	movw	r30, r16
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	80 83       	st	Z, r24
    194c:	1f c0       	rjmp	.+62     	; 0x198c <HLCD_VoidLcdIint+0x122>
    194e:	fe 01       	movw	r30, r28
    1950:	ef 5b       	subi	r30, 0xBF	; 191
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	88 ec       	ldi	r24, 0xC8	; 200
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	91 83       	std	Z+1, r25	; 0x01
    195a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    195c:	fe 01       	movw	r30, r28
    195e:	ef 5b       	subi	r30, 0xBF	; 191
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <HLCD_VoidLcdIint+0xfc>
    196a:	fe 01       	movw	r30, r28
    196c:	ef 5b       	subi	r30, 0xBF	; 191
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	de 01       	movw	r26, r28
    1976:	ad 5b       	subi	r26, 0xBD	; 189
    1978:	bf 4f       	sbci	r27, 0xFF	; 255
    197a:	fe 01       	movw	r30, r28
    197c:	ed 5b       	subi	r30, 0xBD	; 189
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 81       	ld	r24, Z
    1982:	91 81       	ldd	r25, Z+1	; 0x01
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	11 96       	adiw	r26, 0x01	; 1
    1988:	9c 93       	st	X, r25
    198a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	fe 01       	movw	r30, r28
    198e:	ed 5b       	subi	r30, 0xBD	; 189
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	d1 f6       	brne	.-76     	; 0x194e <HLCD_VoidLcdIint+0xe4>
    199a:	24 c0       	rjmp	.+72     	; 0x19e4 <HLCD_VoidLcdIint+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199c:	8e 01       	movw	r16, r28
    199e:	0d 5b       	subi	r16, 0xBD	; 189
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255
    19a2:	fe 01       	movw	r30, r28
    19a4:	eb 5b       	subi	r30, 0xBB	; 187
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	f8 01       	movw	r30, r16
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
    19be:	fe 01       	movw	r30, r28
    19c0:	ed 5b       	subi	r30, 0xBD	; 189
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	80 81       	ld	r24, Z
    19c6:	91 81       	ldd	r25, Z+1	; 0x01
    19c8:	fe 01       	movw	r30, r28
    19ca:	ff 96       	adiw	r30, 0x3f	; 63
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	80 83       	st	Z, r24
    19d0:	fe 01       	movw	r30, r28
    19d2:	ff 96       	adiw	r30, 0x3f	; 63
    19d4:	80 81       	ld	r24, Z
    19d6:	91 81       	ldd	r25, Z+1	; 0x01
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <HLCD_VoidLcdIint+0x16e>
    19dc:	fe 01       	movw	r30, r28
    19de:	ff 96       	adiw	r30, 0x3f	; 63
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
    /* Delay for 32 Ms*/
    _delay_ms(31);

    /* Send The INntialixation Command*/
    HLCD_VoidLcdWriteCmd(0x38);
    19e4:	88 e3       	ldi	r24, 0x38	; 56
    19e6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <HLCD_VoidLcdWriteCmd>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a0 e2       	ldi	r26, 0x20	; 32
    19f0:	b2 e4       	ldi	r27, 0x42	; 66
    19f2:	8b af       	std	Y+59, r24	; 0x3b
    19f4:	9c af       	std	Y+60, r25	; 0x3c
    19f6:	ad af       	std	Y+61, r26	; 0x3d
    19f8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19fa:	6b ad       	ldd	r22, Y+59	; 0x3b
    19fc:	7c ad       	ldd	r23, Y+60	; 0x3c
    19fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a02:	2b ea       	ldi	r18, 0xAB	; 171
    1a04:	3a ea       	ldi	r19, 0xAA	; 170
    1a06:	4a e2       	ldi	r20, 0x2A	; 42
    1a08:	50 e4       	ldi	r21, 0x40	; 64
    1a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8f ab       	std	Y+55, r24	; 0x37
    1a14:	98 af       	std	Y+56, r25	; 0x38
    1a16:	a9 af       	std	Y+57, r26	; 0x39
    1a18:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a1a:	6f a9       	ldd	r22, Y+55	; 0x37
    1a1c:	78 ad       	ldd	r23, Y+56	; 0x38
    1a1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a20:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2e:	88 23       	and	r24, r24
    1a30:	1c f4       	brge	.+6      	; 0x1a38 <HLCD_VoidLcdIint+0x1ce>
		__ticks = 1;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	8e ab       	std	Y+54, r24	; 0x36
    1a36:	91 c0       	rjmp	.+290    	; 0x1b5a <HLCD_VoidLcdIint+0x2f0>
	else if (__tmp > 255)
    1a38:	6f a9       	ldd	r22, Y+55	; 0x37
    1a3a:	78 ad       	ldd	r23, Y+56	; 0x38
    1a3c:	89 ad       	ldd	r24, Y+57	; 0x39
    1a3e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	53 e4       	ldi	r21, 0x43	; 67
    1a48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	0c f0       	brlt	.+2      	; 0x1a52 <HLCD_VoidLcdIint+0x1e8>
    1a50:	7b c0       	rjmp	.+246    	; 0x1b48 <HLCD_VoidLcdIint+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1a52:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a54:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a e7       	ldi	r20, 0x7A	; 122
    1a60:	54 e4       	ldi	r21, 0x44	; 68
    1a62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	8a ab       	std	Y+50, r24	; 0x32
    1a6c:	9b ab       	std	Y+51, r25	; 0x33
    1a6e:	ac ab       	std	Y+52, r26	; 0x34
    1a70:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	6a a9       	ldd	r22, Y+50	; 0x32
    1a74:	7b a9       	ldd	r23, Y+51	; 0x33
    1a76:	8c a9       	ldd	r24, Y+52	; 0x34
    1a78:	9d a9       	ldd	r25, Y+53	; 0x35
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a ef       	ldi	r20, 0xFA	; 250
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	8e a7       	std	Y+46, r24	; 0x2e
    1a8c:	9f a7       	std	Y+47, r25	; 0x2f
    1a8e:	a8 ab       	std	Y+48, r26	; 0x30
    1a90:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a92:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a94:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a96:	88 a9       	ldd	r24, Y+48	; 0x30
    1a98:	99 a9       	ldd	r25, Y+49	; 0x31
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <HLCD_VoidLcdIint+0x24a>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9d a7       	std	Y+45, r25	; 0x2d
    1ab0:	8c a7       	std	Y+44, r24	; 0x2c
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <HLCD_VoidLcdIint+0x2c8>
	else if (__tmp > 65535)
    1ab4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ab6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ab8:	88 a9       	ldd	r24, Y+48	; 0x30
    1aba:	99 a9       	ldd	r25, Y+49	; 0x31
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	57 e4       	ldi	r21, 0x47	; 71
    1ac4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	4c f5       	brge	.+82     	; 0x1b1e <HLCD_VoidLcdIint+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1acc:	6a a9       	ldd	r22, Y+50	; 0x32
    1ace:	7b a9       	ldd	r23, Y+51	; 0x33
    1ad0:	8c a9       	ldd	r24, Y+52	; 0x34
    1ad2:	9d a9       	ldd	r25, Y+53	; 0x35
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9d a7       	std	Y+45, r25	; 0x2d
    1af2:	8c a7       	std	Y+44, r24	; 0x2c
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <HLCD_VoidLcdIint+0x2aa>
    1af6:	88 ec       	ldi	r24, 0xC8	; 200
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9b a7       	std	Y+43, r25	; 0x2b
    1afc:	8a a7       	std	Y+42, r24	; 0x2a
    1afe:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b00:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <HLCD_VoidLcdIint+0x298>
    1b06:	9b a7       	std	Y+43, r25	; 0x2b
    1b08:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b0c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	9d a7       	std	Y+45, r25	; 0x2d
    1b12:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b16:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <HLCD_VoidLcdIint+0x28c>
    1b1c:	24 c0       	rjmp	.+72     	; 0x1b66 <HLCD_VoidLcdIint+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b20:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b22:	88 a9       	ldd	r24, Y+48	; 0x30
    1b24:	99 a9       	ldd	r25, Y+49	; 0x31
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9d a7       	std	Y+45, r25	; 0x2d
    1b30:	8c a7       	std	Y+44, r24	; 0x2c
    1b32:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b34:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b36:	99 a7       	std	Y+41, r25	; 0x29
    1b38:	88 a7       	std	Y+40, r24	; 0x28
    1b3a:	88 a5       	ldd	r24, Y+40	; 0x28
    1b3c:	99 a5       	ldd	r25, Y+41	; 0x29
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <HLCD_VoidLcdIint+0x2d4>
    1b42:	99 a7       	std	Y+41, r25	; 0x29
    1b44:	88 a7       	std	Y+40, r24	; 0x28
    1b46:	0f c0       	rjmp	.+30     	; 0x1b66 <HLCD_VoidLcdIint+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b48:	6f a9       	ldd	r22, Y+55	; 0x37
    1b4a:	78 ad       	ldd	r23, Y+56	; 0x38
    1b4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b4e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	8e ab       	std	Y+54, r24	; 0x36
    1b5a:	8e a9       	ldd	r24, Y+54	; 0x36
    1b5c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b5e:	8f a1       	ldd	r24, Y+39	; 0x27
    1b60:	8a 95       	dec	r24
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <HLCD_VoidLcdIint+0x2f6>
    1b64:	8f a3       	std	Y+39, r24	; 0x27

    /*Delay for 1 Ms*/
    _delay_us(40);

    /* Display ON/OFF Control*/
    HLCD_VoidLcdWriteCmd(0x0f);
    1b66:	8f e0       	ldi	r24, 0x0F	; 15
    1b68:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <HLCD_VoidLcdWriteCmd>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a0 e2       	ldi	r26, 0x20	; 32
    1b72:	b2 e4       	ldi	r27, 0x42	; 66
    1b74:	8b a3       	std	Y+35, r24	; 0x23
    1b76:	9c a3       	std	Y+36, r25	; 0x24
    1b78:	ad a3       	std	Y+37, r26	; 0x25
    1b7a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b80:	8d a1       	ldd	r24, Y+37	; 0x25
    1b82:	9e a1       	ldd	r25, Y+38	; 0x26
    1b84:	2b ea       	ldi	r18, 0xAB	; 171
    1b86:	3a ea       	ldi	r19, 0xAA	; 170
    1b88:	4a e2       	ldi	r20, 0x2A	; 42
    1b8a:	50 e4       	ldi	r21, 0x40	; 64
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	8f 8f       	std	Y+31, r24	; 0x1f
    1b96:	98 a3       	std	Y+32, r25	; 0x20
    1b98:	a9 a3       	std	Y+33, r26	; 0x21
    1b9a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b9c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b9e:	78 a1       	ldd	r23, Y+32	; 0x20
    1ba0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e8       	ldi	r20, 0x80	; 128
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	1c f4       	brge	.+6      	; 0x1bba <HLCD_VoidLcdIint+0x350>
		__ticks = 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	8e 8f       	std	Y+30, r24	; 0x1e
    1bb8:	91 c0       	rjmp	.+290    	; 0x1cdc <HLCD_VoidLcdIint+0x472>
	else if (__tmp > 255)
    1bba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bbc:	78 a1       	ldd	r23, Y+32	; 0x20
    1bbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	53 e4       	ldi	r21, 0x43	; 67
    1bca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	0c f0       	brlt	.+2      	; 0x1bd4 <HLCD_VoidLcdIint+0x36a>
    1bd2:	7b c0       	rjmp	.+246    	; 0x1cca <HLCD_VoidLcdIint+0x460>
	{
		_delay_ms(__us / 1000.0);
    1bd4:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd6:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bda:	9e a1       	ldd	r25, Y+38	; 0x26
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	4a e7       	ldi	r20, 0x7A	; 122
    1be2:	54 e4       	ldi	r21, 0x44	; 68
    1be4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	8a 8f       	std	Y+26, r24	; 0x1a
    1bee:	9b 8f       	std	Y+27, r25	; 0x1b
    1bf0:	ac 8f       	std	Y+28, r26	; 0x1c
    1bf2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bf6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bf8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	4a ef       	ldi	r20, 0xFA	; 250
    1c02:	54 e4       	ldi	r21, 0x44	; 68
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	8e 8b       	std	Y+22, r24	; 0x16
    1c0e:	9f 8b       	std	Y+23, r25	; 0x17
    1c10:	a8 8f       	std	Y+24, r26	; 0x18
    1c12:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c14:	6e 89       	ldd	r22, Y+22	; 0x16
    1c16:	7f 89       	ldd	r23, Y+23	; 0x17
    1c18:	88 8d       	ldd	r24, Y+24	; 0x18
    1c1a:	99 8d       	ldd	r25, Y+25	; 0x19
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e8       	ldi	r20, 0x80	; 128
    1c22:	5f e3       	ldi	r21, 0x3F	; 63
    1c24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c28:	88 23       	and	r24, r24
    1c2a:	2c f4       	brge	.+10     	; 0x1c36 <HLCD_VoidLcdIint+0x3cc>
		__ticks = 1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9d 8b       	std	Y+21, r25	; 0x15
    1c32:	8c 8b       	std	Y+20, r24	; 0x14
    1c34:	3f c0       	rjmp	.+126    	; 0x1cb4 <HLCD_VoidLcdIint+0x44a>
	else if (__tmp > 65535)
    1c36:	6e 89       	ldd	r22, Y+22	; 0x16
    1c38:	7f 89       	ldd	r23, Y+23	; 0x17
    1c3a:	88 8d       	ldd	r24, Y+24	; 0x18
    1c3c:	99 8d       	ldd	r25, Y+25	; 0x19
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	3f ef       	ldi	r19, 0xFF	; 255
    1c42:	4f e7       	ldi	r20, 0x7F	; 127
    1c44:	57 e4       	ldi	r21, 0x47	; 71
    1c46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c4a:	18 16       	cp	r1, r24
    1c4c:	4c f5       	brge	.+82     	; 0x1ca0 <HLCD_VoidLcdIint+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c50:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e2       	ldi	r20, 0x20	; 32
    1c5c:	51 e4       	ldi	r21, 0x41	; 65
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9d 8b       	std	Y+21, r25	; 0x15
    1c74:	8c 8b       	std	Y+20, r24	; 0x14
    1c76:	0f c0       	rjmp	.+30     	; 0x1c96 <HLCD_VoidLcdIint+0x42c>
    1c78:	88 ec       	ldi	r24, 0xC8	; 200
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9b 8b       	std	Y+19, r25	; 0x13
    1c7e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c80:	8a 89       	ldd	r24, Y+18	; 0x12
    1c82:	9b 89       	ldd	r25, Y+19	; 0x13
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <HLCD_VoidLcdIint+0x41a>
    1c88:	9b 8b       	std	Y+19, r25	; 0x13
    1c8a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c8e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	9d 8b       	std	Y+21, r25	; 0x15
    1c94:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c96:	8c 89       	ldd	r24, Y+20	; 0x14
    1c98:	9d 89       	ldd	r25, Y+21	; 0x15
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	69 f7       	brne	.-38     	; 0x1c78 <HLCD_VoidLcdIint+0x40e>
    1c9e:	24 c0       	rjmp	.+72     	; 0x1ce8 <HLCD_VoidLcdIint+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca0:	6e 89       	ldd	r22, Y+22	; 0x16
    1ca2:	7f 89       	ldd	r23, Y+23	; 0x17
    1ca4:	88 8d       	ldd	r24, Y+24	; 0x18
    1ca6:	99 8d       	ldd	r25, Y+25	; 0x19
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9d 8b       	std	Y+21, r25	; 0x15
    1cb2:	8c 8b       	std	Y+20, r24	; 0x14
    1cb4:	8c 89       	ldd	r24, Y+20	; 0x14
    1cb6:	9d 89       	ldd	r25, Y+21	; 0x15
    1cb8:	99 8b       	std	Y+17, r25	; 0x11
    1cba:	88 8b       	std	Y+16, r24	; 0x10
    1cbc:	88 89       	ldd	r24, Y+16	; 0x10
    1cbe:	99 89       	ldd	r25, Y+17	; 0x11
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <HLCD_VoidLcdIint+0x456>
    1cc4:	99 8b       	std	Y+17, r25	; 0x11
    1cc6:	88 8b       	std	Y+16, r24	; 0x10
    1cc8:	0f c0       	rjmp	.+30     	; 0x1ce8 <HLCD_VoidLcdIint+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ccc:	78 a1       	ldd	r23, Y+32	; 0x20
    1cce:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	8e 8f       	std	Y+30, r24	; 0x1e
    1cdc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cde:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce2:	8a 95       	dec	r24
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <HLCD_VoidLcdIint+0x478>
    1ce6:	8f 87       	std	Y+15, r24	; 0x0f

    /*Delay for 1 Ms*/
    _delay_us(40);

    /* Display Clear*/
    HLCD_VoidLcdWriteCmd(0x01);
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <HLCD_VoidLcdWriteCmd>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a0 e0       	ldi	r26, 0x00	; 0
    1cf4:	b0 e4       	ldi	r27, 0x40	; 64
    1cf6:	8b 87       	std	Y+11, r24	; 0x0b
    1cf8:	9c 87       	std	Y+12, r25	; 0x0c
    1cfa:	ad 87       	std	Y+13, r26	; 0x0d
    1cfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	4a ef       	ldi	r20, 0xFA	; 250
    1d0c:	54 e4       	ldi	r21, 0x44	; 68
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	8f 83       	std	Y+7, r24	; 0x07
    1d18:	98 87       	std	Y+8, r25	; 0x08
    1d1a:	a9 87       	std	Y+9, r26	; 0x09
    1d1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d20:	78 85       	ldd	r23, Y+8	; 0x08
    1d22:	89 85       	ldd	r24, Y+9	; 0x09
    1d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d32:	88 23       	and	r24, r24
    1d34:	2c f4       	brge	.+10     	; 0x1d40 <HLCD_VoidLcdIint+0x4d6>
		__ticks = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	3f c0       	rjmp	.+126    	; 0x1dbe <HLCD_VoidLcdIint+0x554>
	else if (__tmp > 65535)
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	4c f5       	brge	.+82     	; 0x1daa <HLCD_VoidLcdIint+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e2       	ldi	r20, 0x20	; 32
    1d66:	51 e4       	ldi	r21, 0x41	; 65
    1d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <HLCD_VoidLcdIint+0x536>
    1d82:	88 ec       	ldi	r24, 0xC8	; 200
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 83       	std	Y+4, r25	; 0x04
    1d88:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <HLCD_VoidLcdIint+0x524>
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	69 f7       	brne	.-38     	; 0x1d82 <HLCD_VoidLcdIint+0x518>
    1da8:	14 c0       	rjmp	.+40     	; 0x1dd2 <HLCD_VoidLcdIint+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1daa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dac:	78 85       	ldd	r23, Y+8	; 0x08
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <HLCD_VoidLcdIint+0x560>
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01

    /*Delay for 1 Ms*/
    _delay_ms(2);

    /* Display Entery Mode Set*/
    HLCD_VoidLcdWriteCmd(0x06);
    1dd2:	86 e0       	ldi	r24, 0x06	; 6
    1dd4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <HLCD_VoidLcdWriteCmd>
}
    1dd8:	c4 5b       	subi	r28, 0xB4	; 180
    1dda:	df 4f       	sbci	r29, 0xFF	; 255
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	08 95       	ret

00001df0 <HLCD_VoidLcdWriteCmd>:

void HLCD_VoidLcdWriteCmd(u8 Copy_u8Cmd)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	69 97       	sbiw	r28, 0x19	; 25
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	89 8f       	std	Y+25, r24	; 0x19

    /*	RS pin  = 0 ==> Select Command Register*/
    MDIO_u8SetPinValue(HLCD_RS_PORT, HLCD_RS_PIN, MDIO_LOW);
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_u8SetPinValue>

    /*	R/W pin  = 0 ==> Select Write Mode*/
    MDIO_u8SetPinValue(HLCD_RW_PORT, HLCD_RW_PIN, MDIO_LOW);
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_u8SetPinValue>

    /*	E pin  = 1 ==> Enable the command */
    MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_HIGH);
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	62 e0       	ldi	r22, 0x02	; 2
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_u8SetPinValue>

    /*	Write Command */
    MDIO_u8SetPortValue(HLCD_DATA_PORT, Copy_u8Cmd);
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	69 8d       	ldd	r22, Y+25	; 0x19
    1e28:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <MDIO_u8SetPortValue>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a0 e8       	ldi	r26, 0x80	; 128
    1e32:	bf e3       	ldi	r27, 0x3F	; 63
    1e34:	8d 8b       	std	Y+21, r24	; 0x15
    1e36:	9e 8b       	std	Y+22, r25	; 0x16
    1e38:	af 8b       	std	Y+23, r26	; 0x17
    1e3a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e40:	8f 89       	ldd	r24, Y+23	; 0x17
    1e42:	98 8d       	ldd	r25, Y+24	; 0x18
    1e44:	2b ea       	ldi	r18, 0xAB	; 171
    1e46:	3a ea       	ldi	r19, 0xAA	; 170
    1e48:	4a e2       	ldi	r20, 0x2A	; 42
    1e4a:	50 e4       	ldi	r21, 0x40	; 64
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	89 8b       	std	Y+17, r24	; 0x11
    1e56:	9a 8b       	std	Y+18, r25	; 0x12
    1e58:	ab 8b       	std	Y+19, r26	; 0x13
    1e5a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e5c:	69 89       	ldd	r22, Y+17	; 0x11
    1e5e:	7a 89       	ldd	r23, Y+18	; 0x12
    1e60:	8b 89       	ldd	r24, Y+19	; 0x13
    1e62:	9c 89       	ldd	r25, Y+20	; 0x14
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	1c f4       	brge	.+6      	; 0x1e7a <HLCD_VoidLcdWriteCmd+0x8a>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	88 8b       	std	Y+16, r24	; 0x10
    1e78:	91 c0       	rjmp	.+290    	; 0x1f9c <HLCD_VoidLcdWriteCmd+0x1ac>
	else if (__tmp > 255)
    1e7a:	69 89       	ldd	r22, Y+17	; 0x11
    1e7c:	7a 89       	ldd	r23, Y+18	; 0x12
    1e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e80:	9c 89       	ldd	r25, Y+20	; 0x14
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	53 e4       	ldi	r21, 0x43	; 67
    1e8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	0c f0       	brlt	.+2      	; 0x1e94 <HLCD_VoidLcdWriteCmd+0xa4>
    1e92:	7b c0       	rjmp	.+246    	; 0x1f8a <HLCD_VoidLcdWriteCmd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e94:	6d 89       	ldd	r22, Y+21	; 0x15
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a e7       	ldi	r20, 0x7A	; 122
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8c 87       	std	Y+12, r24	; 0x0c
    1eae:	9d 87       	std	Y+13, r25	; 0x0d
    1eb0:	ae 87       	std	Y+14, r26	; 0x0e
    1eb2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eb6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1eb8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eba:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	4a ef       	ldi	r20, 0xFA	; 250
    1ec2:	54 e4       	ldi	r21, 0x44	; 68
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	88 87       	std	Y+8, r24	; 0x08
    1ece:	99 87       	std	Y+9, r25	; 0x09
    1ed0:	aa 87       	std	Y+10, r26	; 0x0a
    1ed2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ed4:	68 85       	ldd	r22, Y+8	; 0x08
    1ed6:	79 85       	ldd	r23, Y+9	; 0x09
    1ed8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e8       	ldi	r20, 0x80	; 128
    1ee2:	5f e3       	ldi	r21, 0x3F	; 63
    1ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee8:	88 23       	and	r24, r24
    1eea:	2c f4       	brge	.+10     	; 0x1ef6 <HLCD_VoidLcdWriteCmd+0x106>
		__ticks = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9f 83       	std	Y+7, r25	; 0x07
    1ef2:	8e 83       	std	Y+6, r24	; 0x06
    1ef4:	3f c0       	rjmp	.+126    	; 0x1f74 <HLCD_VoidLcdWriteCmd+0x184>
	else if (__tmp > 65535)
    1ef6:	68 85       	ldd	r22, Y+8	; 0x08
    1ef8:	79 85       	ldd	r23, Y+9	; 0x09
    1efa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1efc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	3f ef       	ldi	r19, 0xFF	; 255
    1f02:	4f e7       	ldi	r20, 0x7F	; 127
    1f04:	57 e4       	ldi	r21, 0x47	; 71
    1f06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	4c f5       	brge	.+82     	; 0x1f60 <HLCD_VoidLcdWriteCmd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f10:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f12:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f14:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e2       	ldi	r20, 0x20	; 32
    1f1c:	51 e4       	ldi	r21, 0x41	; 65
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9f 83       	std	Y+7, r25	; 0x07
    1f34:	8e 83       	std	Y+6, r24	; 0x06
    1f36:	0f c0       	rjmp	.+30     	; 0x1f56 <HLCD_VoidLcdWriteCmd+0x166>
    1f38:	88 ec       	ldi	r24, 0xC8	; 200
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9d 83       	std	Y+5, r25	; 0x05
    1f3e:	8c 83       	std	Y+4, r24	; 0x04
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	9d 81       	ldd	r25, Y+5	; 0x05
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <HLCD_VoidLcdWriteCmd+0x154>
    1f48:	9d 83       	std	Y+5, r25	; 0x05
    1f4a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	9f 83       	std	Y+7, r25	; 0x07
    1f54:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f56:	8e 81       	ldd	r24, Y+6	; 0x06
    1f58:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	69 f7       	brne	.-38     	; 0x1f38 <HLCD_VoidLcdWriteCmd+0x148>
    1f5e:	24 c0       	rjmp	.+72     	; 0x1fa8 <HLCD_VoidLcdWriteCmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f60:	68 85       	ldd	r22, Y+8	; 0x08
    1f62:	79 85       	ldd	r23, Y+9	; 0x09
    1f64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	9f 83       	std	Y+7, r25	; 0x07
    1f72:	8e 83       	std	Y+6, r24	; 0x06
    1f74:	8e 81       	ldd	r24, Y+6	; 0x06
    1f76:	9f 81       	ldd	r25, Y+7	; 0x07
    1f78:	9b 83       	std	Y+3, r25	; 0x03
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <HLCD_VoidLcdWriteCmd+0x190>
    1f84:	9b 83       	std	Y+3, r25	; 0x03
    1f86:	8a 83       	std	Y+2, r24	; 0x02
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <HLCD_VoidLcdWriteCmd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f8a:	69 89       	ldd	r22, Y+17	; 0x11
    1f8c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f90:	9c 89       	ldd	r25, Y+20	; 0x14
    1f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	88 8b       	std	Y+16, r24	; 0x10
    1f9c:	88 89       	ldd	r24, Y+16	; 0x10
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	8a 95       	dec	r24
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <HLCD_VoidLcdWriteCmd+0x1b2>
    1fa6:	89 83       	std	Y+1, r24	; 0x01

    /*	Wait for 230 ns */
    _delay_us(1);

    /*	E pin  = 0 ==> Disable the command*/
    MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_LOW);
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	62 e0       	ldi	r22, 0x02	; 2
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_u8SetPinValue>
}
    1fb2:	69 96       	adiw	r28, 0x19	; 25
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <HLCD_VoidLcdWriteChar>:

void HLCD_VoidLcdWriteChar(u8 Copy_u8Char)
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	69 97       	sbiw	r28, 0x19	; 25
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	89 8f       	std	Y+25, r24	; 0x19

    /*	RS pin  = 0 ==> Select Command Register*/
    MDIO_u8SetPinValue(HLCD_RS_PORT, HLCD_RS_PIN, MDIO_HIGH);
    1fda:	83 e0       	ldi	r24, 0x03	; 3
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_u8SetPinValue>

    /*	R/W pin  = 0 ==> Select Write Mode*/
    MDIO_u8SetPinValue(HLCD_RW_PORT, HLCD_RW_PIN, MDIO_LOW);
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	61 e0       	ldi	r22, 0x01	; 1
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_u8SetPinValue>

    /*	E pin  = 1 ==> Enable the command */
    MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_HIGH);
    1fee:	83 e0       	ldi	r24, 0x03	; 3
    1ff0:	62 e0       	ldi	r22, 0x02	; 2
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_u8SetPinValue>

    /*	Write Command */
    MDIO_u8SetPortValue(HLCD_DATA_PORT, Copy_u8Char);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffc:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <MDIO_u8SetPortValue>
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a0 e8       	ldi	r26, 0x80	; 128
    2006:	bf e3       	ldi	r27, 0x3F	; 63
    2008:	8d 8b       	std	Y+21, r24	; 0x15
    200a:	9e 8b       	std	Y+22, r25	; 0x16
    200c:	af 8b       	std	Y+23, r26	; 0x17
    200e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2010:	6d 89       	ldd	r22, Y+21	; 0x15
    2012:	7e 89       	ldd	r23, Y+22	; 0x16
    2014:	8f 89       	ldd	r24, Y+23	; 0x17
    2016:	98 8d       	ldd	r25, Y+24	; 0x18
    2018:	2b ea       	ldi	r18, 0xAB	; 171
    201a:	3a ea       	ldi	r19, 0xAA	; 170
    201c:	4a e2       	ldi	r20, 0x2A	; 42
    201e:	50 e4       	ldi	r21, 0x40	; 64
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	89 8b       	std	Y+17, r24	; 0x11
    202a:	9a 8b       	std	Y+18, r25	; 0x12
    202c:	ab 8b       	std	Y+19, r26	; 0x13
    202e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2030:	69 89       	ldd	r22, Y+17	; 0x11
    2032:	7a 89       	ldd	r23, Y+18	; 0x12
    2034:	8b 89       	ldd	r24, Y+19	; 0x13
    2036:	9c 89       	ldd	r25, Y+20	; 0x14
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e8       	ldi	r20, 0x80	; 128
    203e:	5f e3       	ldi	r21, 0x3F	; 63
    2040:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2044:	88 23       	and	r24, r24
    2046:	1c f4       	brge	.+6      	; 0x204e <HLCD_VoidLcdWriteChar+0x8a>
		__ticks = 1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	88 8b       	std	Y+16, r24	; 0x10
    204c:	91 c0       	rjmp	.+290    	; 0x2170 <HLCD_VoidLcdWriteChar+0x1ac>
	else if (__tmp > 255)
    204e:	69 89       	ldd	r22, Y+17	; 0x11
    2050:	7a 89       	ldd	r23, Y+18	; 0x12
    2052:	8b 89       	ldd	r24, Y+19	; 0x13
    2054:	9c 89       	ldd	r25, Y+20	; 0x14
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	53 e4       	ldi	r21, 0x43	; 67
    205e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	0c f0       	brlt	.+2      	; 0x2068 <HLCD_VoidLcdWriteChar+0xa4>
    2066:	7b c0       	rjmp	.+246    	; 0x215e <HLCD_VoidLcdWriteChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2068:	6d 89       	ldd	r22, Y+21	; 0x15
    206a:	7e 89       	ldd	r23, Y+22	; 0x16
    206c:	8f 89       	ldd	r24, Y+23	; 0x17
    206e:	98 8d       	ldd	r25, Y+24	; 0x18
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a e7       	ldi	r20, 0x7A	; 122
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8c 87       	std	Y+12, r24	; 0x0c
    2082:	9d 87       	std	Y+13, r25	; 0x0d
    2084:	ae 87       	std	Y+14, r26	; 0x0e
    2086:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2088:	6c 85       	ldd	r22, Y+12	; 0x0c
    208a:	7d 85       	ldd	r23, Y+13	; 0x0d
    208c:	8e 85       	ldd	r24, Y+14	; 0x0e
    208e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a ef       	ldi	r20, 0xFA	; 250
    2096:	54 e4       	ldi	r21, 0x44	; 68
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	88 87       	std	Y+8, r24	; 0x08
    20a2:	99 87       	std	Y+9, r25	; 0x09
    20a4:	aa 87       	std	Y+10, r26	; 0x0a
    20a6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20a8:	68 85       	ldd	r22, Y+8	; 0x08
    20aa:	79 85       	ldd	r23, Y+9	; 0x09
    20ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e8       	ldi	r20, 0x80	; 128
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20bc:	88 23       	and	r24, r24
    20be:	2c f4       	brge	.+10     	; 0x20ca <HLCD_VoidLcdWriteChar+0x106>
		__ticks = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9f 83       	std	Y+7, r25	; 0x07
    20c6:	8e 83       	std	Y+6, r24	; 0x06
    20c8:	3f c0       	rjmp	.+126    	; 0x2148 <HLCD_VoidLcdWriteChar+0x184>
	else if (__tmp > 65535)
    20ca:	68 85       	ldd	r22, Y+8	; 0x08
    20cc:	79 85       	ldd	r23, Y+9	; 0x09
    20ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	3f ef       	ldi	r19, 0xFF	; 255
    20d6:	4f e7       	ldi	r20, 0x7F	; 127
    20d8:	57 e4       	ldi	r21, 0x47	; 71
    20da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20de:	18 16       	cp	r1, r24
    20e0:	4c f5       	brge	.+82     	; 0x2134 <HLCD_VoidLcdWriteChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    20e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    20e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    20e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e2       	ldi	r20, 0x20	; 32
    20f0:	51 e4       	ldi	r21, 0x41	; 65
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9f 83       	std	Y+7, r25	; 0x07
    2108:	8e 83       	std	Y+6, r24	; 0x06
    210a:	0f c0       	rjmp	.+30     	; 0x212a <HLCD_VoidLcdWriteChar+0x166>
    210c:	88 ec       	ldi	r24, 0xC8	; 200
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9d 83       	std	Y+5, r25	; 0x05
    2112:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2114:	8c 81       	ldd	r24, Y+4	; 0x04
    2116:	9d 81       	ldd	r25, Y+5	; 0x05
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <HLCD_VoidLcdWriteChar+0x154>
    211c:	9d 83       	std	Y+5, r25	; 0x05
    211e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	8e 81       	ldd	r24, Y+6	; 0x06
    2122:	9f 81       	ldd	r25, Y+7	; 0x07
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	9f 83       	std	Y+7, r25	; 0x07
    2128:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212a:	8e 81       	ldd	r24, Y+6	; 0x06
    212c:	9f 81       	ldd	r25, Y+7	; 0x07
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	69 f7       	brne	.-38     	; 0x210c <HLCD_VoidLcdWriteChar+0x148>
    2132:	24 c0       	rjmp	.+72     	; 0x217c <HLCD_VoidLcdWriteChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2134:	68 85       	ldd	r22, Y+8	; 0x08
    2136:	79 85       	ldd	r23, Y+9	; 0x09
    2138:	8a 85       	ldd	r24, Y+10	; 0x0a
    213a:	9b 85       	ldd	r25, Y+11	; 0x0b
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9f 83       	std	Y+7, r25	; 0x07
    2146:	8e 83       	std	Y+6, r24	; 0x06
    2148:	8e 81       	ldd	r24, Y+6	; 0x06
    214a:	9f 81       	ldd	r25, Y+7	; 0x07
    214c:	9b 83       	std	Y+3, r25	; 0x03
    214e:	8a 83       	std	Y+2, r24	; 0x02
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	9b 81       	ldd	r25, Y+3	; 0x03
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <HLCD_VoidLcdWriteChar+0x190>
    2158:	9b 83       	std	Y+3, r25	; 0x03
    215a:	8a 83       	std	Y+2, r24	; 0x02
    215c:	0f c0       	rjmp	.+30     	; 0x217c <HLCD_VoidLcdWriteChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    215e:	69 89       	ldd	r22, Y+17	; 0x11
    2160:	7a 89       	ldd	r23, Y+18	; 0x12
    2162:	8b 89       	ldd	r24, Y+19	; 0x13
    2164:	9c 89       	ldd	r25, Y+20	; 0x14
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	88 8b       	std	Y+16, r24	; 0x10
    2170:	88 89       	ldd	r24, Y+16	; 0x10
    2172:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	8a 95       	dec	r24
    2178:	f1 f7       	brne	.-4      	; 0x2176 <HLCD_VoidLcdWriteChar+0x1b2>
    217a:	89 83       	std	Y+1, r24	; 0x01

    /*	Wait for 230 ns */
    _delay_us(1);

    /*	E pin  = 0 ==> Disable the command*/
    MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_LOW);
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	62 e0       	ldi	r22, 0x02	; 2
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_u8SetPinValue>
}
    2186:	69 96       	adiw	r28, 0x19	; 25
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <HLCD_VoidSetCurser>:
u8 HLCD_VoidSetCurser(u8 Copy_u8LineNb, u8 Copy_u8CharNb)
{
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <HLCD_VoidSetCurser+0x6>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <HLCD_VoidSetCurser+0x8>
    21a0:	0f 92       	push	r0
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	8a 83       	std	Y+2, r24	; 0x02
    21a8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState = STD_TYPE_OK;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8LineNb)
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	3d 83       	std	Y+5, r19	; 0x05
    21b6:	2c 83       	std	Y+4, r18	; 0x04
    21b8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ba:	9d 81       	ldd	r25, Y+5	; 0x05
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	91 05       	cpc	r25, r1
    21c0:	31 f0       	breq	.+12     	; 0x21ce <HLCD_VoidSetCurser+0x36>
    21c2:	2c 81       	ldd	r18, Y+4	; 0x04
    21c4:	3d 81       	ldd	r19, Y+5	; 0x05
    21c6:	22 30       	cpi	r18, 0x02	; 2
    21c8:	31 05       	cpc	r19, r1
    21ca:	31 f0       	breq	.+12     	; 0x21d8 <HLCD_VoidSetCurser+0x40>
    21cc:	0a c0       	rjmp	.+20     	; 0x21e2 <HLCD_VoidSetCurser+0x4a>
    {
    case HLCD_LINE_1:
        HLCD_VoidLcdWriteCmd(0x80 + Copy_u8CharNb);
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	80 58       	subi	r24, 0x80	; 128
    21d2:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <HLCD_VoidLcdWriteCmd>
    21d6:	06 c0       	rjmp	.+12     	; 0x21e4 <HLCD_VoidSetCurser+0x4c>
        break;
    case HLCD_LINE_2:
        HLCD_VoidLcdWriteCmd(0xc0 + Copy_u8CharNb);
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	80 54       	subi	r24, 0x40	; 64
    21dc:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <HLCD_VoidLcdWriteCmd>
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <HLCD_VoidSetCurser+0x4c>
        break;
    default:
        Local_u8ErrorState = STD_TYPE_NOK;
    21e2:	19 82       	std	Y+1, r1	; 0x01
        break;
    }

    return Local_u8ErrorState;
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <HLCD_u8WriteStr>:
u8 HLCD_u8WriteStr(const char *Copy_pcStr)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <HLCD_u8WriteStr+0x6>
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <HLCD_u8WriteStr+0x8>
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <HLCD_u8WriteStr+0xa>
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	9d 83       	std	Y+5, r25	; 0x05
    2206:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8ErrorState = STD_TYPE_OK;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	8b 83       	std	Y+3, r24	; 0x03

    if (Copy_pcStr == STD_TYPE_POINTER_NULL)
    220c:	8c 81       	ldd	r24, Y+4	; 0x04
    220e:	9d 81       	ldd	r25, Y+5	; 0x05
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	11 f4       	brne	.+4      	; 0x2218 <HLCD_u8WriteStr+0x22>
    {
        return STD_TYPE_NOK; // Error if null pointer is passed
    2214:	1e 82       	std	Y+6, r1	; 0x06
    2216:	33 c0       	rjmp	.+102    	; 0x227e <HLCD_u8WriteStr+0x88>
    }

    // Starting position
    u8 Line = HLCD_LINE_1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	8a 83       	std	Y+2, r24	; 0x02
    u8 CharPos = 0;
    221c:	19 82       	std	Y+1, r1	; 0x01
    221e:	28 c0       	rjmp	.+80     	; 0x2270 <HLCD_u8WriteStr+0x7a>

    // Write characters until the end of the string
    while (*Copy_pcStr)
    {
        // If we reach the end of the first line, switch to the second line
        if (CharPos >= 16 && Line == HLCD_LINE_1)
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	80 31       	cpi	r24, 0x10	; 16
    2224:	50 f0       	brcs	.+20     	; 0x223a <HLCD_u8WriteStr+0x44>
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	39 f4       	brne	.+14     	; 0x223a <HLCD_u8WriteStr+0x44>
        {
            Line = HLCD_LINE_2;
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	8a 83       	std	Y+2, r24	; 0x02
            CharPos = 0;
    2230:	19 82       	std	Y+1, r1	; 0x01
            HLCD_VoidSetCurser(Line, CharPos); // Move cursor to start of the second line
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	69 81       	ldd	r22, Y+1	; 0x01
    2236:	0e 94 cc 10 	call	0x2198	; 0x2198 <HLCD_VoidSetCurser>
        }

        // If we reach the end of the second line, wrap around to the start of the first line
        if (CharPos >= 16 && Line == HLCD_LINE_2)
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	80 31       	cpi	r24, 0x10	; 16
    223e:	50 f0       	brcs	.+20     	; 0x2254 <HLCD_u8WriteStr+0x5e>
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	82 30       	cpi	r24, 0x02	; 2
    2244:	39 f4       	brne	.+14     	; 0x2254 <HLCD_u8WriteStr+0x5e>
        {
            Line = HLCD_LINE_1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	8a 83       	std	Y+2, r24	; 0x02
            CharPos = 0;
    224a:	19 82       	std	Y+1, r1	; 0x01
            HLCD_VoidSetCurser(Line, CharPos); // Move cursor to start of the first line
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	69 81       	ldd	r22, Y+1	; 0x01
    2250:	0e 94 cc 10 	call	0x2198	; 0x2198 <HLCD_VoidSetCurser>
        }

        // Write the current character to the LCD
        HLCD_VoidLcdWriteChar(*Copy_pcStr++);
    2254:	ec 81       	ldd	r30, Y+4	; 0x04
    2256:	fd 81       	ldd	r31, Y+5	; 0x05
    2258:	20 81       	ld	r18, Z
    225a:	8c 81       	ldd	r24, Y+4	; 0x04
    225c:	9d 81       	ldd	r25, Y+5	; 0x05
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	9d 83       	std	Y+5, r25	; 0x05
    2262:	8c 83       	std	Y+4, r24	; 0x04
    2264:	82 2f       	mov	r24, r18
    2266:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <HLCD_VoidLcdWriteChar>

        // Increment character position
        CharPos++;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	89 83       	std	Y+1, r24	; 0x01
    // Starting position
    u8 Line = HLCD_LINE_1;
    u8 CharPos = 0;

    // Write characters until the end of the string
    while (*Copy_pcStr)
    2270:	ec 81       	ldd	r30, Y+4	; 0x04
    2272:	fd 81       	ldd	r31, Y+5	; 0x05
    2274:	80 81       	ld	r24, Z
    2276:	88 23       	and	r24, r24
    2278:	99 f6       	brne	.-90     	; 0x2220 <HLCD_u8WriteStr+0x2a>

        // Increment character position
        CharPos++;
    }

    return Local_u8ErrorState;
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	8e 83       	std	Y+6, r24	; 0x06
    227e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2280:	26 96       	adiw	r28, 0x06	; 6
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <HLCD_VoidLcdClear>:
void HLCD_VoidLcdClear(void)
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	2e 97       	sbiw	r28, 0x0e	; 14
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    // Send the clear display command (0x01) to the LCD
    HLCD_VoidLcdWriteCmd(0x01);
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <HLCD_VoidLcdWriteCmd>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	a0 e0       	ldi	r26, 0x00	; 0
    22b2:	b0 e4       	ldi	r27, 0x40	; 64
    22b4:	8b 87       	std	Y+11, r24	; 0x0b
    22b6:	9c 87       	std	Y+12, r25	; 0x0c
    22b8:	ad 87       	std	Y+13, r26	; 0x0d
    22ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22be:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a ef       	ldi	r20, 0xFA	; 250
    22ca:	54 e4       	ldi	r21, 0x44	; 68
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	8f 83       	std	Y+7, r24	; 0x07
    22d6:	98 87       	std	Y+8, r25	; 0x08
    22d8:	a9 87       	std	Y+9, r26	; 0x09
    22da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22dc:	6f 81       	ldd	r22, Y+7	; 0x07
    22de:	78 85       	ldd	r23, Y+8	; 0x08
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e8       	ldi	r20, 0x80	; 128
    22ea:	5f e3       	ldi	r21, 0x3F	; 63
    22ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f0:	88 23       	and	r24, r24
    22f2:	2c f4       	brge	.+10     	; 0x22fe <HLCD_VoidLcdClear+0x6c>
		__ticks = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
    22fc:	3f c0       	rjmp	.+126    	; 0x237c <HLCD_VoidLcdClear+0xea>
	else if (__tmp > 65535)
    22fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2300:	78 85       	ldd	r23, Y+8	; 0x08
    2302:	89 85       	ldd	r24, Y+9	; 0x09
    2304:	9a 85       	ldd	r25, Y+10	; 0x0a
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	3f ef       	ldi	r19, 0xFF	; 255
    230a:	4f e7       	ldi	r20, 0x7F	; 127
    230c:	57 e4       	ldi	r21, 0x47	; 71
    230e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2312:	18 16       	cp	r1, r24
    2314:	4c f5       	brge	.+82     	; 0x2368 <HLCD_VoidLcdClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2316:	6b 85       	ldd	r22, Y+11	; 0x0b
    2318:	7c 85       	ldd	r23, Y+12	; 0x0c
    231a:	8d 85       	ldd	r24, Y+13	; 0x0d
    231c:	9e 85       	ldd	r25, Y+14	; 0x0e
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
    233e:	0f c0       	rjmp	.+30     	; 0x235e <HLCD_VoidLcdClear+0xcc>
    2340:	88 ec       	ldi	r24, 0xC8	; 200
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9c 83       	std	Y+4, r25	; 0x04
    2346:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <HLCD_VoidLcdClear+0xba>
    2350:	9c 83       	std	Y+4, r25	; 0x04
    2352:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	9e 81       	ldd	r25, Y+6	; 0x06
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	69 f7       	brne	.-38     	; 0x2340 <HLCD_VoidLcdClear+0xae>
    2366:	14 c0       	rjmp	.+40     	; 0x2390 <HLCD_VoidLcdClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2368:	6f 81       	ldd	r22, Y+7	; 0x07
    236a:	78 85       	ldd	r23, Y+8	; 0x08
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	9e 81       	ldd	r25, Y+6	; 0x06
    2380:	9a 83       	std	Y+2, r25	; 0x02
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <HLCD_VoidLcdClear+0xf6>
    238c:	9a 83       	std	Y+2, r25	; 0x02
    238e:	89 83       	std	Y+1, r24	; 0x01

    // Delay to allow the LCD to process the command and clear the screen
    _delay_ms(2); // 2 ms is typically enough for clearing the screen
}
    2390:	2e 96       	adiw	r28, 0x0e	; 14
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <HLCD_VoidLcdWriteInt>:
void HLCD_VoidLcdWriteInt(int Copy_u32Number)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	a0 97       	sbiw	r28, 0x20	; 32
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	98 a3       	std	Y+32, r25	; 0x20
    23b8:	8f 8f       	std	Y+31, r24	; 0x1f
    char buffer[BUFFER_SIZE]; // Buffer to hold the converted string
    char temp[BUFFER_SIZE];   // Temporary buffer for reverse string
    int isNegative = 0;       // Flag to check if number is negative
    23ba:	1e 82       	std	Y+6, r1	; 0x06
    23bc:	1d 82       	std	Y+5, r1	; 0x05
    int i = 0, j;
    23be:	1c 82       	std	Y+4, r1	; 0x04
    23c0:	1b 82       	std	Y+3, r1	; 0x03

    // Check if the number is negative
    if (Copy_u32Number < 0)
    23c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23c4:	98 a1       	ldd	r25, Y+32	; 0x20
    23c6:	99 23       	and	r25, r25
    23c8:	5c f4       	brge	.+22     	; 0x23e0 <HLCD_VoidLcdWriteInt+0x3e>
    {
        isNegative = 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	9e 83       	std	Y+6, r25	; 0x06
    23d0:	8d 83       	std	Y+5, r24	; 0x05
        Copy_u32Number = -Copy_u32Number; // Make number positive
    23d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23d4:	98 a1       	ldd	r25, Y+32	; 0x20
    23d6:	90 95       	com	r25
    23d8:	81 95       	neg	r24
    23da:	9f 4f       	sbci	r25, 0xFF	; 255
    23dc:	98 a3       	std	Y+32, r25	; 0x20
    23de:	8f 8f       	std	Y+31, r24	; 0x1f
    }

    // Convert integer to string
    do
    {
        buffer[i++] = (Copy_u32Number % 10) + '0'; // Get last digit
    23e0:	eb 81       	ldd	r30, Y+3	; 0x03
    23e2:	fc 81       	ldd	r31, Y+4	; 0x04
    23e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23e6:	98 a1       	ldd	r25, Y+32	; 0x20
    23e8:	2a e0       	ldi	r18, 0x0A	; 10
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	b9 01       	movw	r22, r18
    23ee:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__divmodhi4>
    23f2:	28 2f       	mov	r18, r24
    23f4:	20 5d       	subi	r18, 0xD0	; 208
    23f6:	ce 01       	movw	r24, r28
    23f8:	07 96       	adiw	r24, 0x07	; 7
    23fa:	e8 0f       	add	r30, r24
    23fc:	f9 1f       	adc	r31, r25
    23fe:	20 83       	st	Z, r18
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
    2404:	01 96       	adiw	r24, 0x01	; 1
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
        Copy_u32Number /= 10;                      // Remove last digit
    240a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    240c:	98 a1       	ldd	r25, Y+32	; 0x20
    240e:	2a e0       	ldi	r18, 0x0A	; 10
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	b9 01       	movw	r22, r18
    2414:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__divmodhi4>
    2418:	cb 01       	movw	r24, r22
    241a:	98 a3       	std	Y+32, r25	; 0x20
    241c:	8f 8f       	std	Y+31, r24	; 0x1f
    } while (Copy_u32Number > 0);
    241e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2420:	98 a1       	ldd	r25, Y+32	; 0x20
    2422:	18 16       	cp	r1, r24
    2424:	19 06       	cpc	r1, r25
    2426:	e4 f2       	brlt	.-72     	; 0x23e0 <HLCD_VoidLcdWriteInt+0x3e>

    // Add negative sign if needed
    if (isNegative)
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	71 f0       	breq	.+28     	; 0x244c <HLCD_VoidLcdWriteInt+0xaa>
    {
        buffer[i++] = '-';
    2430:	2b 81       	ldd	r18, Y+3	; 0x03
    2432:	3c 81       	ldd	r19, Y+4	; 0x04
    2434:	ce 01       	movw	r24, r28
    2436:	07 96       	adiw	r24, 0x07	; 7
    2438:	fc 01       	movw	r30, r24
    243a:	e2 0f       	add	r30, r18
    243c:	f3 1f       	adc	r31, r19
    243e:	8d e2       	ldi	r24, 0x2D	; 45
    2440:	80 83       	st	Z, r24
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	9c 81       	ldd	r25, Y+4	; 0x04
    2446:	01 96       	adiw	r24, 0x01	; 1
    2448:	9c 83       	std	Y+4, r25	; 0x04
    244a:	8b 83       	std	Y+3, r24	; 0x03
    }

    // Reverse the string
    buffer[i] = '\0'; // Null-terminate the string
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	9e 01       	movw	r18, r28
    2452:	29 5f       	subi	r18, 0xF9	; 249
    2454:	3f 4f       	sbci	r19, 0xFF	; 255
    2456:	f9 01       	movw	r30, r18
    2458:	e8 0f       	add	r30, r24
    245a:	f9 1f       	adc	r31, r25
    245c:	10 82       	st	Z, r1
    for (j = 0; j < i; j++)
    245e:	1a 82       	std	Y+2, r1	; 0x02
    2460:	19 82       	std	Y+1, r1	; 0x01
    2462:	1e c0       	rjmp	.+60     	; 0x24a0 <HLCD_VoidLcdWriteInt+0xfe>
    {
        temp[j] = buffer[i - j - 1];
    2464:	49 81       	ldd	r20, Y+1	; 0x01
    2466:	5a 81       	ldd	r21, Y+2	; 0x02
    2468:	2b 81       	ldd	r18, Y+3	; 0x03
    246a:	3c 81       	ldd	r19, Y+4	; 0x04
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	b9 01       	movw	r22, r18
    2472:	68 1b       	sub	r22, r24
    2474:	79 0b       	sbc	r23, r25
    2476:	cb 01       	movw	r24, r22
    2478:	9c 01       	movw	r18, r24
    247a:	21 50       	subi	r18, 0x01	; 1
    247c:	30 40       	sbci	r19, 0x00	; 0
    247e:	ce 01       	movw	r24, r28
    2480:	07 96       	adiw	r24, 0x07	; 7
    2482:	fc 01       	movw	r30, r24
    2484:	e2 0f       	add	r30, r18
    2486:	f3 1f       	adc	r31, r19
    2488:	20 81       	ld	r18, Z
    248a:	ce 01       	movw	r24, r28
    248c:	43 96       	adiw	r24, 0x13	; 19
    248e:	fc 01       	movw	r30, r24
    2490:	e4 0f       	add	r30, r20
    2492:	f5 1f       	adc	r31, r21
    2494:	20 83       	st	Z, r18
        buffer[i++] = '-';
    }

    // Reverse the string
    buffer[i] = '\0'; // Null-terminate the string
    for (j = 0; j < i; j++)
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	9a 81       	ldd	r25, Y+2	; 0x02
    249a:	01 96       	adiw	r24, 0x01	; 1
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	29 81       	ldd	r18, Y+1	; 0x01
    24a2:	3a 81       	ldd	r19, Y+2	; 0x02
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	9c 81       	ldd	r25, Y+4	; 0x04
    24a8:	28 17       	cp	r18, r24
    24aa:	39 07       	cpc	r19, r25
    24ac:	dc f2       	brlt	.-74     	; 0x2464 <HLCD_VoidLcdWriteInt+0xc2>
    {
        temp[j] = buffer[i - j - 1];
    }
    temp[i] = '\0'; // Null-terminate the reversed string
    24ae:	2b 81       	ldd	r18, Y+3	; 0x03
    24b0:	3c 81       	ldd	r19, Y+4	; 0x04
    24b2:	ce 01       	movw	r24, r28
    24b4:	43 96       	adiw	r24, 0x13	; 19
    24b6:	fc 01       	movw	r30, r24
    24b8:	e2 0f       	add	r30, r18
    24ba:	f3 1f       	adc	r31, r19
    24bc:	10 82       	st	Z, r1

    // Write the string to the LCD
    HLCD_u8WriteStr(temp);
    24be:	ce 01       	movw	r24, r28
    24c0:	43 96       	adiw	r24, 0x13	; 19
    24c2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <HLCD_u8WriteStr>
}
    24c6:	a0 96       	adiw	r28, 0x20	; 32
    24c8:	0f b6       	in	r0, 0x3f	; 63
    24ca:	f8 94       	cli
    24cc:	de bf       	out	0x3e, r29	; 62
    24ce:	0f be       	out	0x3f, r0	; 63
    24d0:	cd bf       	out	0x3d, r28	; 61
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <HLCD_VoidLcdWriteFloat>:

/* Draw Special Chars */
/* 1- Sned Command to set CGRAM Address */
/* Draw 1 Special Char into First Char in CGRAM*/

void HLCD_VoidLcdWriteFloat(float Copy_f32Number){
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	2a 97       	sbiw	r28, 0x0a	; 10
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	6f 83       	std	Y+7, r22	; 0x07
    24ee:	78 87       	std	Y+8, r23	; 0x08
    24f0:	89 87       	std	Y+9, r24	; 0x09
    24f2:	9a 87       	std	Y+10, r25	; 0x0a
    int intPart = (int)Copy_f32Number;            // Extract the integer part
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    float fracPart = Copy_f32Number - (float)intPart; // Extract the fractional part
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	aa 27       	eor	r26, r26
    250e:	97 fd       	sbrc	r25, 7
    2510:	a0 95       	com	r26
    2512:	ba 2f       	mov	r27, r26
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    251c:	9b 01       	movw	r18, r22
    251e:	ac 01       	movw	r20, r24
    2520:	6f 81       	ldd	r22, Y+7	; 0x07
    2522:	78 85       	ldd	r23, Y+8	; 0x08
    2524:	89 85       	ldd	r24, Y+9	; 0x09
    2526:	9a 85       	ldd	r25, Y+10	; 0x0a
    2528:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	ab 83       	std	Y+3, r26	; 0x03
    2536:	bc 83       	std	Y+4, r27	; 0x04

    if (Copy_f32Number < 0) // Handle negative numbers
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	50 e0       	ldi	r21, 0x00	; 0
    2548:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	9c f4       	brge	.+38     	; 0x2576 <HLCD_VoidLcdWriteFloat+0x9e>
    {
        HLCD_VoidLcdWriteChar('-'); // Write negative sign
    2550:	8d e2       	ldi	r24, 0x2D	; 45
    2552:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <HLCD_VoidLcdWriteChar>
        intPart = -intPart;         // Make integer part positive
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	9e 81       	ldd	r25, Y+6	; 0x06
    255a:	90 95       	com	r25
    255c:	81 95       	neg	r24
    255e:	9f 4f       	sbci	r25, 0xFF	; 255
    2560:	9e 83       	std	Y+6, r25	; 0x06
    2562:	8d 83       	std	Y+5, r24	; 0x05
        fracPart = -fracPart;       // Make fractional part positive
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	ab 81       	ldd	r26, Y+3	; 0x03
    256a:	bc 81       	ldd	r27, Y+4	; 0x04
    256c:	b0 58       	subi	r27, 0x80	; 128
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	ab 83       	std	Y+3, r26	; 0x03
    2574:	bc 83       	std	Y+4, r27	; 0x04
    }

    // Write the integer part
    HLCD_VoidLcdWriteInt(intPart);
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HLCD_VoidLcdWriteInt>

    // Write the decimal point
    HLCD_VoidLcdWriteChar('.');
    257e:	8e e2       	ldi	r24, 0x2E	; 46
    2580:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <HLCD_VoidLcdWriteChar>

    // Write two digits of the fractional part
    fracPart = fracPart * 100;           // Shift the decimal places to the right
    2584:	69 81       	ldd	r22, Y+1	; 0x01
    2586:	7a 81       	ldd	r23, Y+2	; 0x02
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	48 ec       	ldi	r20, 0xC8	; 200
    2592:	52 e4       	ldi	r21, 0x42	; 66
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	ab 83       	std	Y+3, r26	; 0x03
    25a2:	bc 83       	std	Y+4, r27	; 0x04
    HLCD_VoidLcdWriteInt((int)fracPart); // Write the fractional part as an integer
    25a4:	69 81       	ldd	r22, Y+1	; 0x01
    25a6:	7a 81       	ldd	r23, Y+2	; 0x02
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HLCD_VoidLcdWriteInt>
}
    25b8:	2a 96       	adiw	r28, 0x0a	; 10
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <HKPD_u8GetPressedKey>:
static u8 HKPD_AU8ColsPins[4] = {HKPD_C1_PIN, HKPD_C2_PIN, HKPD_C3_PIN, HKPD_C4_PIN};
static u8 HKPD_Au8Keys[4][4] = HKPD_KPD;


u8 HKPD_u8GetPressedKey(u8 *Copy_u8KeyPressed)
{
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	64 97       	sbiw	r28, 0x14	; 20
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	9c 8b       	std	Y+20, r25	; 0x14
    25e0:	8b 8b       	std	Y+19, r24	; 0x13
    u8 Local_u8ErrorState = STD_TYPE_NOK;
    25e2:	19 8a       	std	Y+17, r1	; 0x11
    u8 Local_u8RowCounter;
    u8 Local_u8ColCounter;
    u8 Local_u8PinValue;
    if (Copy_u8KeyPressed != STD_TYPE_POINTER_NULL)
    25e4:	8b 89       	ldd	r24, Y+19	; 0x13
    25e6:	9c 89       	ldd	r25, Y+20	; 0x14
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	09 f4       	brne	.+2      	; 0x25ee <HKPD_u8GetPressedKey+0x24>
    25ec:	d8 c0       	rjmp	.+432    	; 0x279e <HKPD_u8GetPressedKey+0x1d4>
    {
        Local_u8ErrorState = STD_TYPE_OK;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	89 8b       	std	Y+17, r24	; 0x11
        //*Copy_u8KeyPressed = HKPD_NO_KEY_PRESSED;
        for (Local_u8RowCounter = 0; Local_u8RowCounter < 4; Local_u8RowCounter++)
    25f2:	18 8a       	std	Y+16, r1	; 0x10
    25f4:	d0 c0       	rjmp	.+416    	; 0x2796 <HKPD_u8GetPressedKey+0x1cc>
        {
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_LOW);
    25f6:	88 89       	ldd	r24, Y+16	; 0x10
    25f8:	88 2f       	mov	r24, r24
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	fc 01       	movw	r30, r24
    25fe:	ea 57       	subi	r30, 0x7A	; 122
    2600:	fe 4f       	sbci	r31, 0xFE	; 254
    2602:	90 81       	ld	r25, Z
    2604:	82 e0       	ldi	r24, 0x02	; 2
    2606:	69 2f       	mov	r22, r25
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_u8SetPinValue>
            /* Check Cols*/
            for (Local_u8ColCounter = 0; Local_u8ColCounter < 4; Local_u8ColCounter++)
    260e:	1f 86       	std	Y+15, r1	; 0x0f
    2610:	af c0       	rjmp	.+350    	; 0x2770 <HKPD_u8GetPressedKey+0x1a6>
            {
                MDIO_u8GetPinValue(HKPD_COLS_PORT, HKPD_AU8ColsPins[Local_u8ColCounter], &Local_u8PinValue);
    2612:	8f 85       	ldd	r24, Y+15	; 0x0f
    2614:	88 2f       	mov	r24, r24
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	fc 01       	movw	r30, r24
    261a:	e6 57       	subi	r30, 0x76	; 118
    261c:	fe 4f       	sbci	r31, 0xFE	; 254
    261e:	90 81       	ld	r25, Z
    2620:	9e 01       	movw	r18, r28
    2622:	2e 5e       	subi	r18, 0xEE	; 238
    2624:	3f 4f       	sbci	r19, 0xFF	; 255
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	69 2f       	mov	r22, r25
    262a:	a9 01       	movw	r20, r18
    262c:	0e 94 40 0b 	call	0x1680	; 0x1680 <MDIO_u8GetPinValue>
                if (Local_u8PinValue == MDIO_LOW)
    2630:	8a 89       	ldd	r24, Y+18	; 0x12
    2632:	88 23       	and	r24, r24
    2634:	09 f0       	breq	.+2      	; 0x2638 <HKPD_u8GetPressedKey+0x6e>
    2636:	99 c0       	rjmp	.+306    	; 0x276a <HKPD_u8GetPressedKey+0x1a0>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a0 ea       	ldi	r26, 0xA0	; 160
    263e:	b1 e4       	ldi	r27, 0x41	; 65
    2640:	8b 87       	std	Y+11, r24	; 0x0b
    2642:	9c 87       	std	Y+12, r25	; 0x0c
    2644:	ad 87       	std	Y+13, r26	; 0x0d
    2646:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2648:	6b 85       	ldd	r22, Y+11	; 0x0b
    264a:	7c 85       	ldd	r23, Y+12	; 0x0c
    264c:	8d 85       	ldd	r24, Y+13	; 0x0d
    264e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a ef       	ldi	r20, 0xFA	; 250
    2656:	54 e4       	ldi	r21, 0x44	; 68
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	8f 83       	std	Y+7, r24	; 0x07
    2662:	98 87       	std	Y+8, r25	; 0x08
    2664:	a9 87       	std	Y+9, r26	; 0x09
    2666:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267c:	88 23       	and	r24, r24
    267e:	2c f4       	brge	.+10     	; 0x268a <HKPD_u8GetPressedKey+0xc0>
		__ticks = 1;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9e 83       	std	Y+6, r25	; 0x06
    2686:	8d 83       	std	Y+5, r24	; 0x05
    2688:	3f c0       	rjmp	.+126    	; 0x2708 <HKPD_u8GetPressedKey+0x13e>
	else if (__tmp > 65535)
    268a:	6f 81       	ldd	r22, Y+7	; 0x07
    268c:	78 85       	ldd	r23, Y+8	; 0x08
    268e:	89 85       	ldd	r24, Y+9	; 0x09
    2690:	9a 85       	ldd	r25, Y+10	; 0x0a
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	3f ef       	ldi	r19, 0xFF	; 255
    2696:	4f e7       	ldi	r20, 0x7F	; 127
    2698:	57 e4       	ldi	r21, 0x47	; 71
    269a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    269e:	18 16       	cp	r1, r24
    26a0:	4c f5       	brge	.+82     	; 0x26f4 <HKPD_u8GetPressedKey+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	51 e4       	ldi	r21, 0x41	; 65
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	0f c0       	rjmp	.+30     	; 0x26ea <HKPD_u8GetPressedKey+0x120>
    26cc:	88 ec       	ldi	r24, 0xC8	; 200
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9c 83       	std	Y+4, r25	; 0x04
    26d2:	8b 83       	std	Y+3, r24	; 0x03
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	9c 81       	ldd	r25, Y+4	; 0x04
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <HKPD_u8GetPressedKey+0x10e>
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	9e 81       	ldd	r25, Y+6	; 0x06
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	69 f7       	brne	.-38     	; 0x26cc <HKPD_u8GetPressedKey+0x102>
    26f2:	24 c0       	rjmp	.+72     	; 0x273c <HKPD_u8GetPressedKey+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f4:	6f 81       	ldd	r22, Y+7	; 0x07
    26f6:	78 85       	ldd	r23, Y+8	; 0x08
    26f8:	89 85       	ldd	r24, Y+9	; 0x09
    26fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	9e 83       	std	Y+6, r25	; 0x06
    2706:	8d 83       	std	Y+5, r24	; 0x05
    2708:	8d 81       	ldd	r24, Y+5	; 0x05
    270a:	9e 81       	ldd	r25, Y+6	; 0x06
    270c:	9a 83       	std	Y+2, r25	; 0x02
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <HKPD_u8GetPressedKey+0x14a>
    2718:	9a 83       	std	Y+2, r25	; 0x02
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	0f c0       	rjmp	.+30     	; 0x273c <HKPD_u8GetPressedKey+0x172>

                    _delay_ms(20);
                    /*wait the user until switch */
                    while (Local_u8PinValue == MDIO_LOW)
                    {
                        MDIO_u8GetPinValue(HKPD_COLS_PORT, HKPD_AU8ColsPins[Local_u8ColCounter], &Local_u8PinValue);
    271e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2720:	88 2f       	mov	r24, r24
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	fc 01       	movw	r30, r24
    2726:	e6 57       	subi	r30, 0x76	; 118
    2728:	fe 4f       	sbci	r31, 0xFE	; 254
    272a:	90 81       	ld	r25, Z
    272c:	9e 01       	movw	r18, r28
    272e:	2e 5e       	subi	r18, 0xEE	; 238
    2730:	3f 4f       	sbci	r19, 0xFF	; 255
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	69 2f       	mov	r22, r25
    2736:	a9 01       	movw	r20, r18
    2738:	0e 94 40 0b 	call	0x1680	; 0x1680 <MDIO_u8GetPinValue>
                if (Local_u8PinValue == MDIO_LOW)
                {

                    _delay_ms(20);
                    /*wait the user until switch */
                    while (Local_u8PinValue == MDIO_LOW)
    273c:	8a 89       	ldd	r24, Y+18	; 0x12
    273e:	88 23       	and	r24, r24
    2740:	71 f3       	breq	.-36     	; 0x271e <HKPD_u8GetPressedKey+0x154>
                    {
                        MDIO_u8GetPinValue(HKPD_COLS_PORT, HKPD_AU8ColsPins[Local_u8ColCounter], &Local_u8PinValue);
                    }
                    *Copy_u8KeyPressed = HKPD_Au8Keys[Local_u8RowCounter][Local_u8ColCounter];
    2742:	88 89       	ldd	r24, Y+16	; 0x10
    2744:	48 2f       	mov	r20, r24
    2746:	50 e0       	ldi	r21, 0x00	; 0
    2748:	8f 85       	ldd	r24, Y+15	; 0x0f
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	ca 01       	movw	r24, r20
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	82 0f       	add	r24, r18
    275a:	93 1f       	adc	r25, r19
    275c:	fc 01       	movw	r30, r24
    275e:	e2 57       	subi	r30, 0x72	; 114
    2760:	fe 4f       	sbci	r31, 0xFE	; 254
    2762:	80 81       	ld	r24, Z
    2764:	eb 89       	ldd	r30, Y+19	; 0x13
    2766:	fc 89       	ldd	r31, Y+20	; 0x14
    2768:	80 83       	st	Z, r24
        //*Copy_u8KeyPressed = HKPD_NO_KEY_PRESSED;
        for (Local_u8RowCounter = 0; Local_u8RowCounter < 4; Local_u8RowCounter++)
        {
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_LOW);
            /* Check Cols*/
            for (Local_u8ColCounter = 0; Local_u8ColCounter < 4; Local_u8ColCounter++)
    276a:	8f 85       	ldd	r24, Y+15	; 0x0f
    276c:	8f 5f       	subi	r24, 0xFF	; 255
    276e:	8f 87       	std	Y+15, r24	; 0x0f
    2770:	8f 85       	ldd	r24, Y+15	; 0x0f
    2772:	84 30       	cpi	r24, 0x04	; 4
    2774:	08 f4       	brcc	.+2      	; 0x2778 <HKPD_u8GetPressedKey+0x1ae>
    2776:	4d cf       	rjmp	.-358    	; 0x2612 <HKPD_u8GetPressedKey+0x48>
                    *Copy_u8KeyPressed = HKPD_Au8Keys[Local_u8RowCounter][Local_u8ColCounter];
                }

            }
            /*Deactivate Current Row*/
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_HIGH);
    2778:	88 89       	ldd	r24, Y+16	; 0x10
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	fc 01       	movw	r30, r24
    2780:	ea 57       	subi	r30, 0x7A	; 122
    2782:	fe 4f       	sbci	r31, 0xFE	; 254
    2784:	90 81       	ld	r25, Z
    2786:	82 e0       	ldi	r24, 0x02	; 2
    2788:	69 2f       	mov	r22, r25
    278a:	41 e0       	ldi	r20, 0x01	; 1
    278c:	0e 94 ef 09 	call	0x13de	; 0x13de <MDIO_u8SetPinValue>
    u8 Local_u8PinValue;
    if (Copy_u8KeyPressed != STD_TYPE_POINTER_NULL)
    {
        Local_u8ErrorState = STD_TYPE_OK;
        //*Copy_u8KeyPressed = HKPD_NO_KEY_PRESSED;
        for (Local_u8RowCounter = 0; Local_u8RowCounter < 4; Local_u8RowCounter++)
    2790:	88 89       	ldd	r24, Y+16	; 0x10
    2792:	8f 5f       	subi	r24, 0xFF	; 255
    2794:	88 8b       	std	Y+16, r24	; 0x10
    2796:	88 89       	ldd	r24, Y+16	; 0x10
    2798:	84 30       	cpi	r24, 0x04	; 4
    279a:	08 f4       	brcc	.+2      	; 0x279e <HKPD_u8GetPressedKey+0x1d4>
    279c:	2c cf       	rjmp	.-424    	; 0x25f6 <HKPD_u8GetPressedKey+0x2c>
            /*Deactivate Current Row*/
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_HIGH);
        }
    }

    return Local_u8ErrorState;
    279e:	89 89       	ldd	r24, Y+17	; 0x11
}
    27a0:	64 96       	adiw	r28, 0x14	; 20
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <main>:
u8 ACALC_u8FirstNum = 0;
u8 ACALC_u8Sign = 0;
u8 ACALC_u8SecNum = 0;

int main(void)
{
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	0f 92       	push	r0
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8Mode = 0;
    27bc:	19 82       	std	Y+1, r1	; 0x01

    // Initialize the MDIO and LCD
    MDIO_IntialPins();  // Initialize all necessary pins (assuming this function sets up ports and pins)
    27be:	0e 94 75 07 	call	0xeea	; 0xeea <MDIO_IntialPins>
    HLCD_VoidLcdIint(); // Initialize the LCD
    27c2:	0e 94 35 0c 	call	0x186a	; 0x186a <HLCD_VoidLcdIint>
    HLCD_u8WriteStr("0+0=");
    27c6:	80 e6       	ldi	r24, 0x60	; 96
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <HLCD_u8WriteStr>
    while (1)
    {

        NumberCounter(0);
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <NumberCounter>
        SignSlector();
    27d4:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <SignSlector>
        NumberCounter(2);
    27d8:	82 e0       	ldi	r24, 0x02	; 2
    27da:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <NumberCounter>
        Sum();
    27de:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <Sum>
        clear();
    27e2:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <clear>
    27e6:	f3 cf       	rjmp	.-26     	; 0x27ce <main+0x1c>

000027e8 <NumberCounter>:
    }
}
void NumberCounter(u8 Copy_u8Num)
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	63 97       	sbiw	r28, 0x13	; 19
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	8b 8b       	std	Y+19, r24	; 0x13
    u8 Local_u8Counter = 0;
    27fe:	1f 86       	std	Y+15, r1	; 0x0f
    u8 Local_u8PressedUp = 0;
    2800:	18 8a       	std	Y+16, r1	; 0x10
    u8 Local_u8PressedDown = 0;
    2802:	19 8a       	std	Y+17, r1	; 0x11
    u8 Local_u8PressedOut = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	8a 8b       	std	Y+18, r24	; 0x12
    2808:	be c0       	rjmp	.+380    	; 0x2986 <NumberCounter+0x19e>
    while (0 != Local_u8PressedOut)
    {
        MDIO_u8GetPinValue(MDIO_PORTD, MDIO_PIN_3, &Local_u8PressedUp);
    280a:	9e 01       	movw	r18, r28
    280c:	20 5f       	subi	r18, 0xF0	; 240
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
    2810:	83 e0       	ldi	r24, 0x03	; 3
    2812:	63 e0       	ldi	r22, 0x03	; 3
    2814:	a9 01       	movw	r20, r18
    2816:	0e 94 40 0b 	call	0x1680	; 0x1680 <MDIO_u8GetPinValue>
        MDIO_u8GetPinValue(MDIO_PORTD, MDIO_PIN_4, &Local_u8PressedDown);
    281a:	9e 01       	movw	r18, r28
    281c:	2f 5e       	subi	r18, 0xEF	; 239
    281e:	3f 4f       	sbci	r19, 0xFF	; 255
    2820:	83 e0       	ldi	r24, 0x03	; 3
    2822:	64 e0       	ldi	r22, 0x04	; 4
    2824:	a9 01       	movw	r20, r18
    2826:	0e 94 40 0b 	call	0x1680	; 0x1680 <MDIO_u8GetPinValue>
        MDIO_u8GetPinValue(MDIO_PORTD, MDIO_PIN_5, &Local_u8PressedOut);
    282a:	9e 01       	movw	r18, r28
    282c:	2e 5e       	subi	r18, 0xEE	; 238
    282e:	3f 4f       	sbci	r19, 0xFF	; 255
    2830:	83 e0       	ldi	r24, 0x03	; 3
    2832:	65 e0       	ldi	r22, 0x05	; 5
    2834:	a9 01       	movw	r20, r18
    2836:	0e 94 40 0b 	call	0x1680	; 0x1680 <MDIO_u8GetPinValue>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a8 e4       	ldi	r26, 0x48	; 72
    2840:	b3 e4       	ldi	r27, 0x43	; 67
    2842:	8b 87       	std	Y+11, r24	; 0x0b
    2844:	9c 87       	std	Y+12, r25	; 0x0c
    2846:	ad 87       	std	Y+13, r26	; 0x0d
    2848:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284a:	6b 85       	ldd	r22, Y+11	; 0x0b
    284c:	7c 85       	ldd	r23, Y+12	; 0x0c
    284e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2850:	9e 85       	ldd	r25, Y+14	; 0x0e
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4a ef       	ldi	r20, 0xFA	; 250
    2858:	54 e4       	ldi	r21, 0x44	; 68
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	8f 83       	std	Y+7, r24	; 0x07
    2864:	98 87       	std	Y+8, r25	; 0x08
    2866:	a9 87       	std	Y+9, r26	; 0x09
    2868:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    286a:	6f 81       	ldd	r22, Y+7	; 0x07
    286c:	78 85       	ldd	r23, Y+8	; 0x08
    286e:	89 85       	ldd	r24, Y+9	; 0x09
    2870:	9a 85       	ldd	r25, Y+10	; 0x0a
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e8       	ldi	r20, 0x80	; 128
    2878:	5f e3       	ldi	r21, 0x3F	; 63
    287a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    287e:	88 23       	and	r24, r24
    2880:	2c f4       	brge	.+10     	; 0x288c <NumberCounter+0xa4>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
    288a:	3f c0       	rjmp	.+126    	; 0x290a <NumberCounter+0x122>
	else if (__tmp > 65535)
    288c:	6f 81       	ldd	r22, Y+7	; 0x07
    288e:	78 85       	ldd	r23, Y+8	; 0x08
    2890:	89 85       	ldd	r24, Y+9	; 0x09
    2892:	9a 85       	ldd	r25, Y+10	; 0x0a
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	3f ef       	ldi	r19, 0xFF	; 255
    2898:	4f e7       	ldi	r20, 0x7F	; 127
    289a:	57 e4       	ldi	r21, 0x47	; 71
    289c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28a0:	18 16       	cp	r1, r24
    28a2:	4c f5       	brge	.+82     	; 0x28f6 <NumberCounter+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e2       	ldi	r20, 0x20	; 32
    28b2:	51 e4       	ldi	r21, 0x41	; 65
    28b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <NumberCounter+0x104>
    28ce:	88 ec       	ldi	r24, 0xC8	; 200
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9c 83       	std	Y+4, r25	; 0x04
    28d4:	8b 83       	std	Y+3, r24	; 0x03
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <NumberCounter+0xf2>
    28de:	9c 83       	std	Y+4, r25	; 0x04
    28e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	9e 81       	ldd	r25, Y+6	; 0x06
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	69 f7       	brne	.-38     	; 0x28ce <NumberCounter+0xe6>
    28f4:	14 c0       	rjmp	.+40     	; 0x291e <NumberCounter+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f6:	6f 81       	ldd	r22, Y+7	; 0x07
    28f8:	78 85       	ldd	r23, Y+8	; 0x08
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	89 83       	std	Y+1, r24	; 0x01
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	9a 81       	ldd	r25, Y+2	; 0x02
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <NumberCounter+0x12e>
    291a:	9a 83       	std	Y+2, r25	; 0x02
    291c:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(200);

        if (0 == Local_u8PressedUp)
    291e:	88 89       	ldd	r24, Y+16	; 0x10
    2920:	88 23       	and	r24, r24
    2922:	91 f4       	brne	.+36     	; 0x2948 <NumberCounter+0x160>
        {
            Local_u8Counter++;
    2924:	8f 85       	ldd	r24, Y+15	; 0x0f
    2926:	8f 5f       	subi	r24, 0xFF	; 255
    2928:	8f 87       	std	Y+15, r24	; 0x0f
            if (10 == Local_u8Counter)
    292a:	8f 85       	ldd	r24, Y+15	; 0x0f
    292c:	8a 30       	cpi	r24, 0x0A	; 10
    292e:	09 f4       	brne	.+2      	; 0x2932 <NumberCounter+0x14a>
            {
                Local_u8Counter = 0;
    2930:	1f 86       	std	Y+15, r1	; 0x0f
            }
            HLCD_VoidSetCurser(HLCD_LINE_1, Copy_u8Num);
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	6b 89       	ldd	r22, Y+19	; 0x13
    2936:	0e 94 cc 10 	call	0x2198	; 0x2198 <HLCD_VoidSetCurser>

            HLCD_VoidLcdWriteInt(Local_u8Counter);
    293a:	8f 85       	ldd	r24, Y+15	; 0x0f
    293c:	88 2f       	mov	r24, r24
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HLCD_VoidLcdWriteInt>
            Local_u8PressedUp = 0;
    2944:	18 8a       	std	Y+16, r1	; 0x10
    2946:	15 c0       	rjmp	.+42     	; 0x2972 <NumberCounter+0x18a>
        }
        else if (0 == Local_u8PressedDown)
    2948:	89 89       	ldd	r24, Y+17	; 0x11
    294a:	88 23       	and	r24, r24
    294c:	91 f4       	brne	.+36     	; 0x2972 <NumberCounter+0x18a>
        {
            Local_u8Counter--;
    294e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2950:	81 50       	subi	r24, 0x01	; 1
    2952:	8f 87       	std	Y+15, r24	; 0x0f
            if (255 == Local_u8Counter)
    2954:	8f 85       	ldd	r24, Y+15	; 0x0f
    2956:	8f 3f       	cpi	r24, 0xFF	; 255
    2958:	11 f4       	brne	.+4      	; 0x295e <NumberCounter+0x176>
            {
                Local_u8Counter = 9;
    295a:	89 e0       	ldi	r24, 0x09	; 9
    295c:	8f 87       	std	Y+15, r24	; 0x0f
            }
            HLCD_VoidSetCurser(HLCD_LINE_1, Copy_u8Num);
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	6b 89       	ldd	r22, Y+19	; 0x13
    2962:	0e 94 cc 10 	call	0x2198	; 0x2198 <HLCD_VoidSetCurser>

            HLCD_VoidLcdWriteInt(Local_u8Counter);
    2966:	8f 85       	ldd	r24, Y+15	; 0x0f
    2968:	88 2f       	mov	r24, r24
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HLCD_VoidLcdWriteInt>
            Local_u8PressedDown = 0;
    2970:	19 8a       	std	Y+17, r1	; 0x11
        }
        if (0 == Copy_u8Num)
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	88 23       	and	r24, r24
    2976:	21 f4       	brne	.+8      	; 0x2980 <NumberCounter+0x198>
        {
            ACALC_u8FirstNum = Local_u8Counter;
    2978:	8f 85       	ldd	r24, Y+15	; 0x0f
    297a:	80 93 a3 01 	sts	0x01A3, r24
    297e:	03 c0       	rjmp	.+6      	; 0x2986 <NumberCounter+0x19e>
        }
        else
        {
            ACALC_u8SecNum = Local_u8Counter;
    2980:	8f 85       	ldd	r24, Y+15	; 0x0f
    2982:	80 93 a5 01 	sts	0x01A5, r24
{
    u8 Local_u8Counter = 0;
    u8 Local_u8PressedUp = 0;
    u8 Local_u8PressedDown = 0;
    u8 Local_u8PressedOut = 1;
    while (0 != Local_u8PressedOut)
    2986:	8a 89       	ldd	r24, Y+18	; 0x12
    2988:	88 23       	and	r24, r24
    298a:	09 f0       	breq	.+2      	; 0x298e <NumberCounter+0x1a6>
    298c:	3e cf       	rjmp	.-388    	; 0x280a <NumberCounter+0x22>
        else
        {
            ACALC_u8SecNum = Local_u8Counter;
        }
    }
}
    298e:	63 96       	adiw	r28, 0x13	; 19
    2990:	0f b6       	in	r0, 0x3f	; 63
    2992:	f8 94       	cli
    2994:	de bf       	out	0x3e, r29	; 62
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	cd bf       	out	0x3d, r28	; 61
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	08 95       	ret

000029a0 <SignSlector>:
void SignSlector()
{
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	62 97       	sbiw	r28, 0x12	; 18
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8Counter = 0;
    29b4:	1f 86       	std	Y+15, r1	; 0x0f
    u8 Local_u8PressedUp = 0;
    29b6:	18 8a       	std	Y+16, r1	; 0x10
    u8 Local_u8PressedDown = 0;
    29b8:	19 8a       	std	Y+17, r1	; 0x11
    u8 Local_u8PressedOut = 1;
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	8a 8b       	std	Y+18, r24	; 0x12
    29be:	bb c0       	rjmp	.+374    	; 0x2b36 <SignSlector+0x196>
    while (0 != Local_u8PressedOut)
    {
        MDIO_u8GetPinValue(MDIO_PORTD, MDIO_PIN_3, &Local_u8PressedUp);
    29c0:	9e 01       	movw	r18, r28
    29c2:	20 5f       	subi	r18, 0xF0	; 240
    29c4:	3f 4f       	sbci	r19, 0xFF	; 255
    29c6:	83 e0       	ldi	r24, 0x03	; 3
    29c8:	63 e0       	ldi	r22, 0x03	; 3
    29ca:	a9 01       	movw	r20, r18
    29cc:	0e 94 40 0b 	call	0x1680	; 0x1680 <MDIO_u8GetPinValue>
        MDIO_u8GetPinValue(MDIO_PORTD, MDIO_PIN_4, &Local_u8PressedDown);
    29d0:	9e 01       	movw	r18, r28
    29d2:	2f 5e       	subi	r18, 0xEF	; 239
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
    29d6:	83 e0       	ldi	r24, 0x03	; 3
    29d8:	64 e0       	ldi	r22, 0x04	; 4
    29da:	a9 01       	movw	r20, r18
    29dc:	0e 94 40 0b 	call	0x1680	; 0x1680 <MDIO_u8GetPinValue>
        MDIO_u8GetPinValue(MDIO_PORTD, MDIO_PIN_5, &Local_u8PressedOut);
    29e0:	9e 01       	movw	r18, r28
    29e2:	2e 5e       	subi	r18, 0xEE	; 238
    29e4:	3f 4f       	sbci	r19, 0xFF	; 255
    29e6:	83 e0       	ldi	r24, 0x03	; 3
    29e8:	65 e0       	ldi	r22, 0x05	; 5
    29ea:	a9 01       	movw	r20, r18
    29ec:	0e 94 40 0b 	call	0x1680	; 0x1680 <MDIO_u8GetPinValue>
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	a8 e4       	ldi	r26, 0x48	; 72
    29f6:	b3 e4       	ldi	r27, 0x43	; 67
    29f8:	8b 87       	std	Y+11, r24	; 0x0b
    29fa:	9c 87       	std	Y+12, r25	; 0x0c
    29fc:	ad 87       	std	Y+13, r26	; 0x0d
    29fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	4a ef       	ldi	r20, 0xFA	; 250
    2a0e:	54 e4       	ldi	r21, 0x44	; 68
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	8f 83       	std	Y+7, r24	; 0x07
    2a1a:	98 87       	std	Y+8, r25	; 0x08
    2a1c:	a9 87       	std	Y+9, r26	; 0x09
    2a1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e8       	ldi	r20, 0x80	; 128
    2a2e:	5f e3       	ldi	r21, 0x3F	; 63
    2a30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a34:	88 23       	and	r24, r24
    2a36:	2c f4       	brge	.+10     	; 0x2a42 <SignSlector+0xa2>
		__ticks = 1;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9e 83       	std	Y+6, r25	; 0x06
    2a3e:	8d 83       	std	Y+5, r24	; 0x05
    2a40:	3f c0       	rjmp	.+126    	; 0x2ac0 <SignSlector+0x120>
	else if (__tmp > 65535)
    2a42:	6f 81       	ldd	r22, Y+7	; 0x07
    2a44:	78 85       	ldd	r23, Y+8	; 0x08
    2a46:	89 85       	ldd	r24, Y+9	; 0x09
    2a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	3f ef       	ldi	r19, 0xFF	; 255
    2a4e:	4f e7       	ldi	r20, 0x7F	; 127
    2a50:	57 e4       	ldi	r21, 0x47	; 71
    2a52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a56:	18 16       	cp	r1, r24
    2a58:	4c f5       	brge	.+82     	; 0x2aac <SignSlector+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e2       	ldi	r20, 0x20	; 32
    2a68:	51 e4       	ldi	r21, 0x41	; 65
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9e 83       	std	Y+6, r25	; 0x06
    2a80:	8d 83       	std	Y+5, r24	; 0x05
    2a82:	0f c0       	rjmp	.+30     	; 0x2aa2 <SignSlector+0x102>
    2a84:	88 ec       	ldi	r24, 0xC8	; 200
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	9c 83       	std	Y+4, r25	; 0x04
    2a8a:	8b 83       	std	Y+3, r24	; 0x03
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <SignSlector+0xf0>
    2a94:	9c 83       	std	Y+4, r25	; 0x04
    2a96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a98:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	9e 83       	std	Y+6, r25	; 0x06
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	69 f7       	brne	.-38     	; 0x2a84 <SignSlector+0xe4>
    2aaa:	14 c0       	rjmp	.+40     	; 0x2ad4 <SignSlector+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aac:	6f 81       	ldd	r22, Y+7	; 0x07
    2aae:	78 85       	ldd	r23, Y+8	; 0x08
    2ab0:	89 85       	ldd	r24, Y+9	; 0x09
    2ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9e 83       	std	Y+6, r25	; 0x06
    2abe:	8d 83       	std	Y+5, r24	; 0x05
    2ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac4:	9a 83       	std	Y+2, r25	; 0x02
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <SignSlector+0x12c>
    2ad0:	9a 83       	std	Y+2, r25	; 0x02
    2ad2:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(200);

        if (0 == Local_u8PressedUp)
    2ad4:	88 89       	ldd	r24, Y+16	; 0x10
    2ad6:	88 23       	and	r24, r24
    2ad8:	a9 f4       	brne	.+42     	; 0x2b04 <SignSlector+0x164>
        {
            Local_u8Counter++;
    2ada:	8f 85       	ldd	r24, Y+15	; 0x0f
    2adc:	8f 5f       	subi	r24, 0xFF	; 255
    2ade:	8f 87       	std	Y+15, r24	; 0x0f
            if (4 == Local_u8Counter)
    2ae0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ae2:	84 30       	cpi	r24, 0x04	; 4
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <SignSlector+0x148>
            {
                Local_u8Counter = 0;
    2ae6:	1f 86       	std	Y+15, r1	; 0x0f
            }

            HLCD_VoidSetCurser(HLCD_LINE_1, 1);
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	0e 94 cc 10 	call	0x2198	; 0x2198 <HLCD_VoidSetCurser>
            HLCD_VoidLcdWriteChar(ACALC_Au8Signs[Local_u8Counter]);
    2af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	fc 01       	movw	r30, r24
    2af8:	e2 56       	subi	r30, 0x62	; 98
    2afa:	fe 4f       	sbci	r31, 0xFE	; 254
    2afc:	80 81       	ld	r24, Z
    2afe:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <HLCD_VoidLcdWriteChar>
            Local_u8PressedUp = 0;
    2b02:	18 8a       	std	Y+16, r1	; 0x10
        }
        if (0 == Local_u8PressedDown)
    2b04:	89 89       	ldd	r24, Y+17	; 0x11
    2b06:	88 23       	and	r24, r24
    2b08:	b1 f4       	brne	.+44     	; 0x2b36 <SignSlector+0x196>
        {
            Local_u8Counter--;
    2b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b0c:	81 50       	subi	r24, 0x01	; 1
    2b0e:	8f 87       	std	Y+15, r24	; 0x0f
            if (255 == Local_u8Counter)
    2b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b12:	8f 3f       	cpi	r24, 0xFF	; 255
    2b14:	11 f4       	brne	.+4      	; 0x2b1a <SignSlector+0x17a>
            {
                Local_u8Counter = 3;
    2b16:	83 e0       	ldi	r24, 0x03	; 3
    2b18:	8f 87       	std	Y+15, r24	; 0x0f
            }

            HLCD_VoidSetCurser(HLCD_LINE_1, 1);
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	61 e0       	ldi	r22, 0x01	; 1
    2b1e:	0e 94 cc 10 	call	0x2198	; 0x2198 <HLCD_VoidSetCurser>
            HLCD_VoidLcdWriteChar(ACALC_Au8Signs[Local_u8Counter]);
    2b22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b24:	88 2f       	mov	r24, r24
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	fc 01       	movw	r30, r24
    2b2a:	e2 56       	subi	r30, 0x62	; 98
    2b2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2e:	80 81       	ld	r24, Z
    2b30:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <HLCD_VoidLcdWriteChar>
            Local_u8PressedDown = 0;
    2b34:	19 8a       	std	Y+17, r1	; 0x11
{
    u8 Local_u8Counter = 0;
    u8 Local_u8PressedUp = 0;
    u8 Local_u8PressedDown = 0;
    u8 Local_u8PressedOut = 1;
    while (0 != Local_u8PressedOut)
    2b36:	8a 89       	ldd	r24, Y+18	; 0x12
    2b38:	88 23       	and	r24, r24
    2b3a:	09 f0       	breq	.+2      	; 0x2b3e <SignSlector+0x19e>
    2b3c:	41 cf       	rjmp	.-382    	; 0x29c0 <SignSlector+0x20>
            HLCD_VoidSetCurser(HLCD_LINE_1, 1);
            HLCD_VoidLcdWriteChar(ACALC_Au8Signs[Local_u8Counter]);
            Local_u8PressedDown = 0;
        }
    }
    ACALC_u8Sign = Local_u8Counter;
    2b3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b40:	80 93 a4 01 	sts	0x01A4, r24
}
    2b44:	62 96       	adiw	r28, 0x12	; 18
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <Sum>:
void Sum()
{
    2b56:	ef 92       	push	r14
    2b58:	ff 92       	push	r15
    2b5a:	0f 93       	push	r16
    2b5c:	1f 93       	push	r17
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	00 d0       	rcall	.+0      	; 0x2b64 <Sum+0xe>
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <Sum+0x10>
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <Sum+0x12>
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    
    // HLCD_VoidSetCurser(HLCD_LINE_2, 0);
    // HLCD_VoidLcdWriteInt(ACALC_u8FirstNum);
    // HLCD_VoidLcdWriteInt(ACALC_u8Sign);
    // HLCD_VoidLcdWriteInt(ACALC_u8SecNum);
    HLCD_VoidSetCurser(HLCD_LINE_1, 4);
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	64 e0       	ldi	r22, 0x04	; 4
    2b70:	0e 94 cc 10 	call	0x2198	; 0x2198 <HLCD_VoidSetCurser>
    switch (ACALC_u8Sign)
    2b74:	80 91 a4 01 	lds	r24, 0x01A4
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	3e 83       	std	Y+6, r19	; 0x06
    2b7e:	2d 83       	std	Y+5, r18	; 0x05
    2b80:	4d 81       	ldd	r20, Y+5	; 0x05
    2b82:	5e 81       	ldd	r21, Y+6	; 0x06
    2b84:	41 30       	cpi	r20, 0x01	; 1
    2b86:	51 05       	cpc	r21, r1
    2b88:	19 f1       	breq	.+70     	; 0x2bd0 <Sum+0x7a>
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8e:	82 30       	cpi	r24, 0x02	; 2
    2b90:	91 05       	cpc	r25, r1
    2b92:	34 f4       	brge	.+12     	; 0x2ba0 <Sum+0x4a>
    2b94:	2d 81       	ldd	r18, Y+5	; 0x05
    2b96:	3e 81       	ldd	r19, Y+6	; 0x06
    2b98:	21 15       	cp	r18, r1
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	61 f0       	breq	.+24     	; 0x2bb6 <Sum+0x60>
    2b9e:	71 c0       	rjmp	.+226    	; 0x2c82 <Sum+0x12c>
    2ba0:	4d 81       	ldd	r20, Y+5	; 0x05
    2ba2:	5e 81       	ldd	r21, Y+6	; 0x06
    2ba4:	42 30       	cpi	r20, 0x02	; 2
    2ba6:	51 05       	cpc	r21, r1
    2ba8:	11 f1       	breq	.+68     	; 0x2bee <Sum+0x98>
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	9e 81       	ldd	r25, Y+6	; 0x06
    2bae:	83 30       	cpi	r24, 0x03	; 3
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	81 f1       	breq	.+96     	; 0x2c14 <Sum+0xbe>
    2bb4:	66 c0       	rjmp	.+204    	; 0x2c82 <Sum+0x12c>
    {
    case 0:
        HLCD_VoidLcdWriteInt(ACALC_u8FirstNum + ACALC_u8SecNum);
    2bb6:	80 91 a3 01 	lds	r24, 0x01A3
    2bba:	28 2f       	mov	r18, r24
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	80 91 a5 01 	lds	r24, 0x01A5
    2bc2:	88 2f       	mov	r24, r24
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	82 0f       	add	r24, r18
    2bc8:	93 1f       	adc	r25, r19
    2bca:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HLCD_VoidLcdWriteInt>
    2bce:	59 c0       	rjmp	.+178    	; 0x2c82 <Sum+0x12c>
        break;
    case 1:
        HLCD_VoidLcdWriteInt(ACALC_u8FirstNum - ACALC_u8SecNum);
    2bd0:	80 91 a3 01 	lds	r24, 0x01A3
    2bd4:	28 2f       	mov	r18, r24
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	80 91 a5 01 	lds	r24, 0x01A5
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a9 01       	movw	r20, r18
    2be2:	48 1b       	sub	r20, r24
    2be4:	59 0b       	sbc	r21, r25
    2be6:	ca 01       	movw	r24, r20
    2be8:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HLCD_VoidLcdWriteInt>
    2bec:	4a c0       	rjmp	.+148    	; 0x2c82 <Sum+0x12c>
        break;
    case 2:
        HLCD_VoidLcdWriteInt(ACALC_u8FirstNum * ACALC_u8SecNum);
    2bee:	80 91 a3 01 	lds	r24, 0x01A3
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	80 91 a5 01 	lds	r24, 0x01A5
    2bfa:	88 2f       	mov	r24, r24
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	ac 01       	movw	r20, r24
    2c00:	24 9f       	mul	r18, r20
    2c02:	c0 01       	movw	r24, r0
    2c04:	25 9f       	mul	r18, r21
    2c06:	90 0d       	add	r25, r0
    2c08:	34 9f       	mul	r19, r20
    2c0a:	90 0d       	add	r25, r0
    2c0c:	11 24       	eor	r1, r1
    2c0e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <HLCD_VoidLcdWriteInt>
    2c12:	37 c0       	rjmp	.+110    	; 0x2c82 <Sum+0x12c>
        break;
    case 3 :
        if (0 == ACALC_u8SecNum)
    2c14:	80 91 a5 01 	lds	r24, 0x01A5
    2c18:	88 23       	and	r24, r24
    2c1a:	49 f4       	brne	.+18     	; 0x2c2e <Sum+0xd8>
        {
            HLCD_VoidSetCurser(HLCD_LINE_2, 0);
    2c1c:	82 e0       	ldi	r24, 0x02	; 2
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	0e 94 cc 10 	call	0x2198	; 0x2198 <HLCD_VoidSetCurser>
            HLCD_u8WriteStr("Invalid Division By Zero");
    2c24:	85 e6       	ldi	r24, 0x65	; 101
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <HLCD_u8WriteStr>
    2c2c:	2a c0       	rjmp	.+84     	; 0x2c82 <Sum+0x12c>
            
        }
        else
        {
            f16 Div =   ((f16)ACALC_u8FirstNum) / ((f16)ACALC_u8SecNum);
    2c2e:	80 91 a3 01 	lds	r24, 0x01A3
    2c32:	88 2f       	mov	r24, r24
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	a0 e0       	ldi	r26, 0x00	; 0
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	bc 01       	movw	r22, r24
    2c3c:	cd 01       	movw	r24, r26
    2c3e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2c42:	7b 01       	movw	r14, r22
    2c44:	8c 01       	movw	r16, r24
    2c46:	80 91 a5 01 	lds	r24, 0x01A5
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	a0 e0       	ldi	r26, 0x00	; 0
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2c5a:	9b 01       	movw	r18, r22
    2c5c:	ac 01       	movw	r20, r24
    2c5e:	c8 01       	movw	r24, r16
    2c60:	b7 01       	movw	r22, r14
    2c62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	9a 83       	std	Y+2, r25	; 0x02
    2c6e:	ab 83       	std	Y+3, r26	; 0x03
    2c70:	bc 83       	std	Y+4, r27	; 0x04
            HLCD_VoidLcdWriteFloat(Div);
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	9a 81       	ldd	r25, Y+2	; 0x02
    2c76:	ab 81       	ldd	r26, Y+3	; 0x03
    2c78:	bc 81       	ldd	r27, Y+4	; 0x04
    2c7a:	bc 01       	movw	r22, r24
    2c7c:	cd 01       	movw	r24, r26
    2c7e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <HLCD_VoidLcdWriteFloat>
        break;

    default:
        break;
    }
}
    2c82:	26 96       	adiw	r28, 0x06	; 6
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	ff 90       	pop	r15
    2c98:	ef 90       	pop	r14
    2c9a:	08 95       	ret

00002c9c <clear>:
void clear(){
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	2f 97       	sbiw	r28, 0x0f	; 15
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    
    u8 Local_u8PressedOut = 1;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	8f 87       	std	Y+15, r24	; 0x0f
    2cb4:	08 c0       	rjmp	.+16     	; 0x2cc6 <clear+0x2a>
    while (0 != Local_u8PressedOut)
    {
        MDIO_u8GetPinValue(MDIO_PORTD, MDIO_PIN_5, &Local_u8PressedOut);
    2cb6:	9e 01       	movw	r18, r28
    2cb8:	21 5f       	subi	r18, 0xF1	; 241
    2cba:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbc:	83 e0       	ldi	r24, 0x03	; 3
    2cbe:	65 e0       	ldi	r22, 0x05	; 5
    2cc0:	a9 01       	movw	r20, r18
    2cc2:	0e 94 40 0b 	call	0x1680	; 0x1680 <MDIO_u8GetPinValue>
    }
}
void clear(){
    
    u8 Local_u8PressedOut = 1;
    while (0 != Local_u8PressedOut)
    2cc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc8:	88 23       	and	r24, r24
    2cca:	a9 f7       	brne	.-22     	; 0x2cb6 <clear+0x1a>
    {
        MDIO_u8GetPinValue(MDIO_PORTD, MDIO_PIN_5, &Local_u8PressedOut);
        
    }
    HLCD_VoidLcdClear();
    2ccc:	0e 94 49 11 	call	0x2292	; 0x2292 <HLCD_VoidLcdClear>
    HLCD_u8WriteStr("0+0=");
    2cd0:	80 e6       	ldi	r24, 0x60	; 96
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <HLCD_u8WriteStr>
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	a6 e9       	ldi	r26, 0x96	; 150
    2cde:	b3 e4       	ldi	r27, 0x43	; 67
    2ce0:	8b 87       	std	Y+11, r24	; 0x0b
    2ce2:	9c 87       	std	Y+12, r25	; 0x0c
    2ce4:	ad 87       	std	Y+13, r26	; 0x0d
    2ce6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	4a ef       	ldi	r20, 0xFA	; 250
    2cf6:	54 e4       	ldi	r21, 0x44	; 68
    2cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	8f 83       	std	Y+7, r24	; 0x07
    2d02:	98 87       	std	Y+8, r25	; 0x08
    2d04:	a9 87       	std	Y+9, r26	; 0x09
    2d06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e8       	ldi	r20, 0x80	; 128
    2d16:	5f e3       	ldi	r21, 0x3F	; 63
    2d18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d1c:	88 23       	and	r24, r24
    2d1e:	2c f4       	brge	.+10     	; 0x2d2a <clear+0x8e>
		__ticks = 1;
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	9e 83       	std	Y+6, r25	; 0x06
    2d26:	8d 83       	std	Y+5, r24	; 0x05
    2d28:	3f c0       	rjmp	.+126    	; 0x2da8 <clear+0x10c>
	else if (__tmp > 65535)
    2d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2c:	78 85       	ldd	r23, Y+8	; 0x08
    2d2e:	89 85       	ldd	r24, Y+9	; 0x09
    2d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	3f ef       	ldi	r19, 0xFF	; 255
    2d36:	4f e7       	ldi	r20, 0x7F	; 127
    2d38:	57 e4       	ldi	r21, 0x47	; 71
    2d3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d3e:	18 16       	cp	r1, r24
    2d40:	4c f5       	brge	.+82     	; 0x2d94 <clear+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	40 e2       	ldi	r20, 0x20	; 32
    2d50:	51 e4       	ldi	r21, 0x41	; 65
    2d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	bc 01       	movw	r22, r24
    2d5c:	cd 01       	movw	r24, r26
    2d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	9e 83       	std	Y+6, r25	; 0x06
    2d68:	8d 83       	std	Y+5, r24	; 0x05
    2d6a:	0f c0       	rjmp	.+30     	; 0x2d8a <clear+0xee>
    2d6c:	88 ec       	ldi	r24, 0xC8	; 200
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	9c 83       	std	Y+4, r25	; 0x04
    2d72:	8b 83       	std	Y+3, r24	; 0x03
    2d74:	8b 81       	ldd	r24, Y+3	; 0x03
    2d76:	9c 81       	ldd	r25, Y+4	; 0x04
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <clear+0xdc>
    2d7c:	9c 83       	std	Y+4, r25	; 0x04
    2d7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d80:	8d 81       	ldd	r24, Y+5	; 0x05
    2d82:	9e 81       	ldd	r25, Y+6	; 0x06
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	9e 83       	std	Y+6, r25	; 0x06
    2d88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	69 f7       	brne	.-38     	; 0x2d6c <clear+0xd0>
    2d92:	14 c0       	rjmp	.+40     	; 0x2dbc <clear+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d94:	6f 81       	ldd	r22, Y+7	; 0x07
    2d96:	78 85       	ldd	r23, Y+8	; 0x08
    2d98:	89 85       	ldd	r24, Y+9	; 0x09
    2d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	9e 83       	std	Y+6, r25	; 0x06
    2da6:	8d 83       	std	Y+5, r24	; 0x05
    2da8:	8d 81       	ldd	r24, Y+5	; 0x05
    2daa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dac:	9a 83       	std	Y+2, r25	; 0x02
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	9a 81       	ldd	r25, Y+2	; 0x02
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	f1 f7       	brne	.-4      	; 0x2db4 <clear+0x118>
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(300);
}
    2dbc:	2f 96       	adiw	r28, 0x0f	; 15
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <__divmodhi4>:
    2dce:	97 fb       	bst	r25, 7
    2dd0:	09 2e       	mov	r0, r25
    2dd2:	07 26       	eor	r0, r23
    2dd4:	0a d0       	rcall	.+20     	; 0x2dea <__divmodhi4_neg1>
    2dd6:	77 fd       	sbrc	r23, 7
    2dd8:	04 d0       	rcall	.+8      	; 0x2de2 <__divmodhi4_neg2>
    2dda:	0c d0       	rcall	.+24     	; 0x2df4 <__udivmodhi4>
    2ddc:	06 d0       	rcall	.+12     	; 0x2dea <__divmodhi4_neg1>
    2dde:	00 20       	and	r0, r0
    2de0:	1a f4       	brpl	.+6      	; 0x2de8 <__divmodhi4_exit>

00002de2 <__divmodhi4_neg2>:
    2de2:	70 95       	com	r23
    2de4:	61 95       	neg	r22
    2de6:	7f 4f       	sbci	r23, 0xFF	; 255

00002de8 <__divmodhi4_exit>:
    2de8:	08 95       	ret

00002dea <__divmodhi4_neg1>:
    2dea:	f6 f7       	brtc	.-4      	; 0x2de8 <__divmodhi4_exit>
    2dec:	90 95       	com	r25
    2dee:	81 95       	neg	r24
    2df0:	9f 4f       	sbci	r25, 0xFF	; 255
    2df2:	08 95       	ret

00002df4 <__udivmodhi4>:
    2df4:	aa 1b       	sub	r26, r26
    2df6:	bb 1b       	sub	r27, r27
    2df8:	51 e1       	ldi	r21, 0x11	; 17
    2dfa:	07 c0       	rjmp	.+14     	; 0x2e0a <__udivmodhi4_ep>

00002dfc <__udivmodhi4_loop>:
    2dfc:	aa 1f       	adc	r26, r26
    2dfe:	bb 1f       	adc	r27, r27
    2e00:	a6 17       	cp	r26, r22
    2e02:	b7 07       	cpc	r27, r23
    2e04:	10 f0       	brcs	.+4      	; 0x2e0a <__udivmodhi4_ep>
    2e06:	a6 1b       	sub	r26, r22
    2e08:	b7 0b       	sbc	r27, r23

00002e0a <__udivmodhi4_ep>:
    2e0a:	88 1f       	adc	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	5a 95       	dec	r21
    2e10:	a9 f7       	brne	.-22     	; 0x2dfc <__udivmodhi4_loop>
    2e12:	80 95       	com	r24
    2e14:	90 95       	com	r25
    2e16:	bc 01       	movw	r22, r24
    2e18:	cd 01       	movw	r24, r26
    2e1a:	08 95       	ret

00002e1c <__prologue_saves__>:
    2e1c:	2f 92       	push	r2
    2e1e:	3f 92       	push	r3
    2e20:	4f 92       	push	r4
    2e22:	5f 92       	push	r5
    2e24:	6f 92       	push	r6
    2e26:	7f 92       	push	r7
    2e28:	8f 92       	push	r8
    2e2a:	9f 92       	push	r9
    2e2c:	af 92       	push	r10
    2e2e:	bf 92       	push	r11
    2e30:	cf 92       	push	r12
    2e32:	df 92       	push	r13
    2e34:	ef 92       	push	r14
    2e36:	ff 92       	push	r15
    2e38:	0f 93       	push	r16
    2e3a:	1f 93       	push	r17
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	ca 1b       	sub	r28, r26
    2e46:	db 0b       	sbc	r29, r27
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	09 94       	ijmp

00002e54 <__epilogue_restores__>:
    2e54:	2a 88       	ldd	r2, Y+18	; 0x12
    2e56:	39 88       	ldd	r3, Y+17	; 0x11
    2e58:	48 88       	ldd	r4, Y+16	; 0x10
    2e5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e60:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e62:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e64:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e66:	b9 84       	ldd	r11, Y+9	; 0x09
    2e68:	c8 84       	ldd	r12, Y+8	; 0x08
    2e6a:	df 80       	ldd	r13, Y+7	; 0x07
    2e6c:	ee 80       	ldd	r14, Y+6	; 0x06
    2e6e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e70:	0c 81       	ldd	r16, Y+4	; 0x04
    2e72:	1b 81       	ldd	r17, Y+3	; 0x03
    2e74:	aa 81       	ldd	r26, Y+2	; 0x02
    2e76:	b9 81       	ldd	r27, Y+1	; 0x01
    2e78:	ce 0f       	add	r28, r30
    2e7a:	d1 1d       	adc	r29, r1
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	ed 01       	movw	r28, r26
    2e88:	08 95       	ret

00002e8a <_exit>:
    2e8a:	f8 94       	cli

00002e8c <__stop_program>:
    2e8c:	ff cf       	rjmp	.-2      	; 0x2e8c <__stop_program>
